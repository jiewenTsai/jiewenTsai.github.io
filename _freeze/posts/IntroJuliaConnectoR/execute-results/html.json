{
  "hash": "68c18c305b62498a1c7f8f4dee74cfde",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction to `ExtendedRtIrtModeling.jl` through `JuliaConnectoR`\"\nauthor: \"JW Tsai\"\ndate: \"2024-11-19\"\nexecute:\n  cache: true\n---\n\n\nI've just updated my Julia package, `ExtendedRtIrtModeling.jl`, to version 0.2.0. There are a few new features in there that I'll run through in the next few sections.\n\nBut that's not all! If you're an R user, I'll introduce you to an R package called `JuliaConnectoR` that lets you run Julia programs in R. It'll bridge the two languages seamlessly.\n\n## Using in Julia\n\nSee the Github page.\n\n## Using in R\n\nAll you have to do is to install and library the `JuliaConnectoR` as usual, and then you can use the `juliaImport` function to import any Julia package. It seems like the  package's version you get depends on which copy version you've had on your computer (**confirmed**). ~~The great thing is, it'll always download the newest version from Github, but not the stable one.~~\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(JuliaConnectoR)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'JuliaConnectoR' was built under R version 4.4.1\n```\n\n\n:::\n:::\n\n\nI've got a toy data set to test, but I'll run through the demo anyway. As you can see from the data below, the data set includes 25 columns: one for ID, 10 for item responses, 10 for (log-)response time, and four for explanatory variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemo <- read.csv('https://raw.githubusercontent.com/jiewenTsai/ExtendedRtIrtModeling.jl/refs/heads/main/data/demo.csv')\nhead(demo)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    id y1 y2 y3 y4 y5 y6 y7 y8 y9 y10    t1    t2    t3    t4    t5    t6    t7\n1 s001  0  0  0  0  1  0  0  0  0   0 2.961 4.225 3.322 2.164 2.273 2.631 2.505\n2 s002  0  0  0  0  1  1  1  0  0   0 3.848 3.996 4.434 3.246 2.663 3.819 2.158\n3 s003  0  0  0  0  0  1  1  1  0   0 3.122 3.273 4.489 3.891 3.410 3.879 2.951\n4 s004  0  1  0  0  0  0  1  0  0   0 3.515 3.162 4.151 3.371 2.885 3.026 1.439\n5 s005  0  0  0  0  0  0  1  0  1   0 3.060 3.962 4.058 3.696 2.732 2.560 2.517\n6 s006  0  0  0  0  1  0  0  0  0   0 3.546 3.360 3.382 3.262 1.931 1.629 1.463\n     t8    t9   t10 x1     x2     x3    x4\n1 3.924 2.198 2.878  0 -3.362 -0.200 1.063\n2 2.848 2.492 4.038  1 -0.081  2.347 1.063\n3 3.891 3.877 3.553  0 -0.829 -1.068 1.063\n4 3.243 2.694 3.603  1 -0.829 -0.676 1.063\n5 3.339 3.421 3.314  0 -0.829  0.097 1.063\n6 2.475 2.373 2.909  1 -1.251 -3.096 1.063\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(demo)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 300\nColumns: 25\n$ id  <chr> \"s001\", \"s002\", \"s003\", \"s004\", \"s005\", \"s006\", \"s007\", \"s008\", \"s…\n$ y1  <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, …\n$ y2  <int> 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ y3  <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ y4  <int> 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ y5  <int> 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, …\n$ y6  <int> 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, …\n$ y7  <int> 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, …\n$ y8  <int> 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, …\n$ y9  <int> 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, …\n$ y10 <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ t1  <dbl> 2.961, 3.848, 3.122, 3.515, 3.060, 3.546, 2.579, 3.854, 4.516, 2.9…\n$ t2  <dbl> 4.225, 3.996, 3.273, 3.162, 3.962, 3.360, 3.448, 3.451, 4.943, 4.1…\n$ t3  <dbl> 3.322, 4.434, 4.489, 4.151, 4.058, 3.382, 3.753, 2.875, 2.945, 5.0…\n$ t4  <dbl> 2.164, 3.246, 3.891, 3.371, 3.696, 3.262, 3.575, 3.634, 4.444, 4.0…\n$ t5  <dbl> 2.273, 2.663, 3.410, 2.885, 2.732, 1.931, 2.846, 2.560, 2.718, 2.8…\n$ t6  <dbl> 2.631, 3.819, 3.879, 3.026, 2.560, 1.629, 3.153, 2.499, 1.442, 3.3…\n$ t7  <dbl> 2.505, 2.158, 2.951, 1.439, 2.517, 1.463, 3.370, 2.581, 1.666, 3.2…\n$ t8  <dbl> 3.924, 2.848, 3.891, 3.243, 3.339, 2.475, 2.424, 2.124, 3.301, 3.3…\n$ t9  <dbl> 2.198, 2.492, 3.877, 2.694, 3.421, 2.373, 2.039, 2.749, 1.962, 2.7…\n$ t10 <dbl> 2.878, 4.038, 3.553, 3.603, 3.314, 2.909, 2.923, 2.366, 4.804, 3.6…\n$ x1  <int> 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, …\n$ x2  <dbl> -3.362, -0.081, -0.829, -0.829, -0.829, -1.251, 1.174, -0.829, -1.…\n$ x3  <dbl> -0.200, 2.347, -1.068, -0.676, 0.097, -3.096, -1.944, -1.258, -1.4…\n$ x4  <dbl> 1.063, 1.063, 1.063, 1.063, 1.063, 1.063, 0.104, -0.587, -2.002, -…\n```\n\n\n:::\n:::\n\n\nNext, let's take a look at how accuracy and speed related to each other, barely using the raw data (mean of y and mean of t) to get a rough idea.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(\n  accuracy = rowMeans(demo[2:11]),\n  speed = -rowMeans(demo[12:21])\n) |>\n  ggplot(aes(x=accuracy, y=speed)) +\n  geom_point() +\n  geom_jitter() +\n  geom_smooth(method = \"loess\") \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](IntroJuliaConnectoR_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## The modeling part.\n\nLet's follow the example from the Github readme post to show how a basic RT-IRT model works. This package is version 0.2.0.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## You have to give a name to the Julia Environment.\nex <- juliaImport(\"ExtendedRtIrtModeling\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nStarting Julia ...\n```\n\n\n:::\n\n```{.r .cell-code}\njuliaEval('Pkg.status(\"ExtendedRtIrtModeling\")')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nStatus `~/.julia/environments/v1.10/Project.toml`\n  [1fd685a6] ExtendedRtIrtModeling v0.2.0 `https://github.com/jiewenTsai/ExtendedRtIrtModeling.jl#main`\n```\n\n\n:::\n:::\n\n\nIn the original Github post, the user doesn't have to fill in all five arguments of `InputData` because the values for $\\kappa$ and *logT* are automatically calculated by *Y* and *T*. However, to get it working with R, I've come up with another struct called `InputData4R`, which is specifically for R users.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## import your data set\nCond = ex$setCond(\n  nChain=3, \n  nIter=3000,\n  nSubj=300,\n  nItem=10,\n  nFeat=4\n  )\nData = ex$InputData4R(\n    Y = as.matrix(demo[2:11]),\n    # you must write this line!\n    κ = as.matrix(demo[2:11]-0.5),\n    T = as.matrix(exp(demo[12:21])),\n    logT = as.matrix(demo[12:21]),\n    X = as.matrix(demo[22:25])\n)\n\n## build a model and sample it!\nMCMC = ex$GibbsRtIrt(Cond, Data=Data)\n## Notice the `` style for sample!\nex$`sample!`(MCMC)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Julia object of type ExtendedRtIrtModeling.GibbsRtIrt>\nExtendedRtIrtModeling.GibbsRtIrt(ExtendedRtIrtModeling.SimConditions(300, 10, 4, 3000, 3, 1500, 1, 10, 0.5, 0.5), ExtendedRtIrtModeling.InputData4R([0 0 … 0 0; 0 0 … 0 0; … ; 0 0 … 1 0; 0 1 … 1 0], [-0.5 -0.5 … -0.5 -0.5; -0.5 -0.5 … -0.5 -0.5; … ; -0.5 -0.5 … 0.5 -0.5; -0.5 0.5 … 0.5 -0.5], [19.31727937946127 68.3745035485581 … 9.006981510434914 17.778680238058843; 46.89917102861648 54.38019363641357 … 12.085422811327593 56.71280369681312; … ; 27.194098966393437 42.182270397465956 … 25.584840292351714 119.46219960089533; 35.05786562994266 82.26946350420168 … 43.991656898689 24.754319523777408], [2.961 4.225 … 2.198 2.878; 3.848 3.996 … 2.492 4.038; … ; 3.303 3.742 … 3.242 4.783; 3.557 4.41 … 3.784 3.209], [0.0 -3.362 -0.2 1.063; 1.0 -0.081 2.347 1.063; … ; 1.0 -0.064 0.445 -0.318; 0.0 -0.449 -0.676 1.063]), Float64[], ExtendedRtIrtModeling.InputPara([0.3137423041364331 0.3415237894886167 … 0.11183446557866958 0.05790546531201218; 0.25638289531148994 0.3566247394185408 … 0.09091133809565621 0.05204210938445989; … ; 0.16332544992167716 0.32252191915665784 … 0.3726970452403918 0.20414636916984366; 0.16949649737031303 0.33905817515050696 … 0.09826986769390608 0.265528224767851], [-1.578676215807743; -0.9203745423441859; … ; -0.10664096875232022; -1.0594805763603632;;], [1.0445433708534635; 1.2644831163990256; … ; 1.5193557431767508; 1.4485813534579228;;], [-0.38647204662333506; -1.2538527924663074; … ; -0.7752956269598285; 0.14931123796642268;;], [0.43162195514686763; 0.21061616328551705; … ; -0.22905611375794022; 0.08899580003777864;;], [3.30761010661482; 3.927589114707531; … ; 2.923971130851645; 3.725603662587948;;], [0.39824774784188943; 0.29277495083742106; … ; 0.2886170757599006; 0.22597973246093783;;], Float64[], [0.0 0.0; -0.1287760810605439 0.2005212948416813; … ; 0.24017749307214029 -0.03657573094224067; 0.008839392786410502 -0.025342572043680473], Float64[], [1.2044553464348549 -0.02744833933113381; -0.02744833933113381 0.16019891442664336]), ExtendedRtIrtModeling.OutputPost([-2.6646011859395102 -0.7085410419736089 … -0.7565130647503794 0.3286140470016074; -3.0079544580340505 -1.1650659603554177 … -2.071385732680604 -0.054216474343903594; … ; -1.8557839828202527 -0.393936588592598 … -0.5882928400994076 0.15979568723647153; -3.1041380789618436 -0.35870758669354397 … -0.6967538992227875 0.06328643828884624;;; -0.579926218388121 -0.7694249965520048 … -3.1140451246568315 2.7402901051293598; -3.075016116622655 -1.2406363622468877 … -2.503322534120851 0.13695410653130946; … ; -2.1335402869236435 -0.43925842963308437 … -0.6019945753771228 -0.03565198116535539; -2.522017090166128 -0.5649540622562687 … -0.6170559255436903 0.19848121170487343;;; -0.21804544538641857 -0.676995006519194 … -3.4915357429600893 0.616787024738047; -3.2312874601622315 -1.0896767020878362 … -1.6598629898813122 0.24991302410254954; … ; -2.058305777627975 0.062354750660974304 … -0.7882966622933067 0.025527360107749916; -1.578676215807743 -0.9203745423441859 … -0.7752956269598285 0.14931123796642268], [-0.0425113941831008 0.1282335730526704 … 1.5331777368989858 1.7535271264893457; 0.3638056929725671 -0.21324689798075652 … 0.3052904922863609 0.24033474721531817; … ; 0.4500141724394335 0.3545728122723381 … 0.3455600652811882 0.28449342578509995; 0.47014791738809614 0.019075281312259804 … 0.3242380318762755 0.2275179082474999;;; 0.17732270162233285 -0.17177064495680683 … 0.38833920211163014 0.4249138574806367; 0.5220091561873619 0.08732510564249564 … 0.3201903557326946 0.23361730578487278; … ; 0.4851239544558618 0.15852466776851742 … 0.2954354859256739 0.28978480634782655; 0.47977068862041994 0.10186204831034498 … 0.25952115767849615 0.2565337283085566;;; 0.33191292942991374 0.16440927325200227 … 0.27058856993690944 0.267348416884789; 0.547237380074301 0.545919153533114 … 0.26898546105113474 0.30199737061250354; … ; 0.644551828361199 0.11662762772835153 … 0.3059250699897882 0.23977366140057393; 0.43162195514686763 0.21061616328551705 … 0.2886170757599006 0.22597973246093783], [0.0 -0.008071132892489258 … -0.04385131392470358 1.0198932915748098; 0.0 -0.14345204339751882 … 0.025654283556167064 0.20401456528600365; … ; 0.0 -0.0641979689318157 … -0.05137005697139327 0.16457547267983416; 0.0 -0.12147626570379585 … -0.0019527630286848394 0.16191524109541255;;; 0.0 -0.18717208184736112 … -0.07618324595309203 0.3322180492450072; 0.0 -0.09180706041632986 … 0.004693343977941498 0.20421324356814724; … ; 0.0 -0.12074793470842118 … -0.031644537136957834 0.15784539422938612; 0.0 -0.052943956404781334 … -0.031277558977574706 0.15679446856218407;;; 0.0 -0.17231495142403486 … -0.08223291509286375 0.22461367602728788; 0.0 -0.05853035695319146 … -0.018305599288515745 0.1666650137419096; … ; 0.0 -0.03999951218457838 … -0.054987581840916844 0.1894554448424559; 0.0 -0.1287760810605439 … -0.02744833933113381 0.16019891442664336], [-6569.736753186094; -4842.764638091079; … ; -4473.173949907039; -4487.210078406651;;; -5175.308294452186; -4733.926409728214; … ; -4481.404160259903; -4462.206318327685;;; -4977.26606658747; -4689.974515372751; … ; -4478.351068758786; -4489.820864529613], ExtendedRtIrtModeling.InputPara(Float64[], [-2.339140454802746, -0.8909902414379508, -1.1585403208427778, -1.3377675192797214, -1.3198749686220312, -2.1598378084914684, -1.5504785037230635, -0.8934914953299252, -1.4086145497748246, -1.0481788260462772  …  -0.5338470723604528, -0.5671380168192632, -0.30805574544862707, -0.7757490378144447, -0.4395734278679758, -0.642476359839492, -0.8945642160907551, -0.7441127733988433, -0.3685888055857756, -0.8378304510800633], [1.3649196787327174, 1.6242478162295646, 1.8786325288283046, 2.372861758278475, 1.1731708612135332, 1.6563893360202497, 1.929380648727127, 0.8488668227020303, 1.4099641876226139, 1.639109576090664], [-0.46014231920221, -0.9082292498630915, 0.0026549300628270676, -0.03611296191425276, -0.1819282742645006, -0.7138704020640786, -1.7037110085735492, -1.165853395209599, -0.6773706604262375, 0.036880122106446644], [0.5114266254432426, 0.1843530644597257, -0.07963821093280457, 0.40812578462251875, 0.20470059908612467, 0.8011944318530605, 0.4831962809053242, 0.6291542010773029, 0.22979667406161905, -0.023816094617968145  …  -0.6149134860670965, -0.29321154046497633, -0.15129580655926447, -0.4500161352318017, -0.03553249606029144, -0.5698173452921096, -0.014884078023460852, 0.28790323134123963, -0.18763900108587359, -0.2253154411481993], [3.3099877211930604, 3.8859688206968706, 4.584338076511737, 3.8260526200195115, 3.035070871167548, 3.2470790614614486, 2.987014600550239, 3.711404444961663, 2.8721389617221793, 3.742665330848496], [0.3789923746830642, 0.30514640194298825, 0.2964493508162058, 0.3485604176039491, 0.3337010438357073, 0.4805703515210315, 0.26507844934737856, 0.2938075495956295, 0.29601557353109936, 0.25207545571197304], Float64[], [0.0, -0.06682429491245291, 0.5396322579382782, 0.20926088101101464, -0.0055328740907218, 0.0, 0.1925441845060982, 0.003392391671879015, -0.036044007677121966, -0.021190721760734818], Float64[], [1.007975743291263, -0.042295263001564415, -0.042295263001564415, 0.17602999557781845])))\n```\n\n\n:::\n\n```{.r .cell-code}\nex$coef(MCMC)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n>> Results for ExtendedRtIrtModeling.GibbsRtIrt.\n1) Item Parameters.\n┌───────┬─────────┬─────────┬─────────┬─────────┐\n│  Item │       a │       b │       λ │     σ²t │\n│ Int64 │ Float64 │ Float64 │ Float64 │ Float64 │\n├───────┼─────────┼─────────┼─────────┼─────────┤\n│     1 │   1.365 │  -0.460 │   3.310 │   0.379 │\n│     2 │   1.624 │  -0.908 │   3.886 │   0.305 │\n│     3 │   1.879 │   0.003 │   4.584 │   0.296 │\n│     4 │   2.373 │  -0.036 │   3.826 │   0.349 │\n│     5 │   1.173 │  -0.182 │   3.035 │   0.334 │\n│     6 │   1.656 │  -0.714 │   3.247 │   0.481 │\n│     7 │   1.929 │  -1.704 │   2.987 │   0.265 │\n│     8 │   0.849 │  -1.166 │   3.711 │   0.294 │\n│     9 │   1.410 │  -0.677 │   2.872 │   0.296 │\n│    10 │   1.639 │   0.037 │   3.743 │   0.252 │\n└───────┴─────────┴─────────┴─────────┴─────────┘\n2) Covariance of Person Parameters.\n┌──────┬────────┬────────┐\n│ Coef │      θ │      ζ │\n├──────┼────────┼────────┤\n│    θ │  1.008 │ -0.042 │\n│    ζ │ -0.042 │  0.176 │\n└──────┴────────┴────────┘\n3) Regression Coefficients.\n┌──────┬────────┬────────┐\n│ Coef │      θ │      ζ │\n├──────┼────────┼────────┤\n│   β0 │  0.000 │  0.000 │\n│   β1 │ -0.067 │  0.193 │\n│   β2 │  0.540 │  0.003 │\n│   β3 │  0.209 │ -0.036 │\n│   β4 │ -0.006 │ -0.021 │\n└──────┴────────┴────────┘\n4) Criterion.\n┌──────────┬──────────┐\n│ Deviance │      DIC │\n├──────────┼──────────┤\n│ 8960.638 │ 9604.430 │\n└──────────┴──────────┘\n```\n\n\n:::\n\n```{.r .cell-code}\nex$precis(MCMC)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n>> Results for ExtendedRtIrtModeling.GibbsRtIrt.\n1) Item Response Model.\n┌────────────┬─────────┬─────────┬──────────┬─────────┬─────────┬─────────┬────────┐\n│ parameters │    mean │     std │      ess │    rhat │     q05 │     q95 │    Sig │\n│     Symbol │ Float64 │ Float64 │  Float64 │ Float64 │ Float64 │ Float64 │ String │\n├────────────┼─────────┼─────────┼──────────┼─────────┼─────────┼─────────┼────────┤\n│         a1 │   1.365 │   0.215 │ 2031.342 │   0.999 │   1.027 │   1.729 │      * │\n│         a2 │   1.624 │   0.280 │ 1023.142 │   1.000 │   1.213 │   2.120 │      * │\n│         a3 │   1.879 │   0.284 │ 1340.683 │   1.000 │   1.440 │   2.374 │      * │\n│         a4 │   2.373 │   0.411 │  796.093 │   1.008 │   1.796 │   3.093 │      * │\n│         a5 │   1.173 │   0.181 │ 2488.416 │   1.000 │   0.888 │   1.475 │      * │\n│         a6 │   1.656 │   0.266 │ 1307.783 │   1.001 │   1.256 │   2.143 │      * │\n│         a7 │   1.929 │   0.438 │  332.926 │   1.006 │   1.309 │   2.761 │      * │\n│         a8 │   0.849 │   0.173 │ 1622.491 │   1.000 │   0.564 │   1.137 │      * │\n│         a9 │   1.410 │   0.224 │ 1572.424 │   1.000 │   1.069 │   1.798 │      * │\n│        a10 │   1.639 │   0.236 │ 1900.847 │   1.000 │   1.275 │   2.048 │      * │\n│         b1 │  -0.460 │   0.127 │ 2354.512 │   1.000 │  -0.672 │  -0.258 │      * │\n│         b2 │  -0.908 │   0.133 │ 1369.807 │   1.000 │  -1.136 │  -0.700 │      * │\n│         b3 │   0.003 │   0.108 │ 2045.609 │   1.000 │  -0.172 │   0.180 │        │\n│         b4 │  -0.036 │   0.098 │ 1978.555 │   1.000 │  -0.195 │   0.122 │        │\n│         b5 │  -0.182 │   0.133 │ 2616.222 │   1.000 │  -0.404 │   0.038 │        │\n│         b6 │  -0.714 │   0.122 │ 2039.870 │   1.000 │  -0.920 │  -0.521 │      * │\n│         b7 │  -1.704 │   0.206 │  493.275 │   1.003 │  -2.063 │  -1.398 │      * │\n│         b8 │  -1.166 │   0.263 │ 1989.826 │   1.000 │  -1.635 │  -0.805 │      * │\n│         b9 │  -0.677 │   0.130 │ 2086.720 │   1.000 │  -0.899 │  -0.470 │      * │\n│        b10 │   0.037 │   0.110 │ 2444.179 │   1.000 │  -0.142 │   0.215 │        │\n└────────────┴─────────┴─────────┴──────────┴─────────┴─────────┴─────────┴────────┘\n2) Response Time Model.\n┌────────────┬─────────┬─────────┬──────────┬─────────┬─────────┬─────────┬────────┐\n│ parameters │    mean │     std │      ess │    rhat │     q05 │     q95 │    Sig │\n│     Symbol │ Float64 │ Float64 │  Float64 │ Float64 │ Float64 │ Float64 │ String │\n├────────────┼─────────┼─────────┼──────────┼─────────┼─────────┼─────────┼────────┤\n│         λ1 │   3.310 │   0.044 │ 1795.493 │   1.001 │   3.238 │   3.383 │      * │\n│         λ2 │   3.886 │   0.041 │ 1878.261 │   1.002 │   3.819 │   3.954 │      * │\n│         λ3 │   4.584 │   0.040 │ 1764.888 │   1.001 │   4.519 │   4.650 │      * │\n│         λ4 │   3.826 │   0.043 │ 1799.599 │   1.003 │   3.757 │   3.895 │      * │\n│         λ5 │   3.035 │   0.042 │ 1748.269 │   1.003 │   2.965 │   3.105 │      * │\n│         λ6 │   3.247 │   0.048 │ 2179.353 │   1.002 │   3.169 │   3.326 │      * │\n│         λ7 │   2.987 │   0.039 │ 1727.063 │   1.002 │   2.922 │   3.052 │      * │\n│         λ8 │   3.711 │   0.041 │ 1675.810 │   1.002 │   3.645 │   3.779 │      * │\n│         λ9 │   2.872 │   0.041 │ 1705.345 │   1.001 │   2.805 │   2.942 │      * │\n│        λ10 │   3.743 │   0.039 │ 1775.891 │   1.002 │   3.679 │   3.805 │      * │\n│       σ²t1 │   0.379 │   0.034 │ 4503.800 │   1.000 │   0.326 │   0.438 │      * │\n│       σ²t2 │   0.305 │   0.027 │ 4309.889 │   1.000 │   0.263 │   0.352 │      * │\n│       σ²t3 │   0.296 │   0.027 │ 4360.224 │   1.000 │   0.255 │   0.343 │      * │\n│       σ²t4 │   0.349 │   0.031 │ 4233.063 │   1.001 │   0.301 │   0.403 │      * │\n│       σ²t5 │   0.334 │   0.030 │ 4470.407 │   1.000 │   0.287 │   0.385 │      * │\n│       σ²t6 │   0.481 │   0.042 │ 3763.722 │   1.000 │   0.415 │   0.554 │      * │\n│       σ²t7 │   0.265 │   0.024 │ 4348.786 │   1.000 │   0.228 │   0.309 │      * │\n│       σ²t8 │   0.294 │   0.026 │ 4179.601 │   1.001 │   0.253 │   0.339 │      * │\n│       σ²t9 │   0.296 │   0.026 │ 4486.570 │   1.000 │   0.255 │   0.341 │      * │\n│      σ²t10 │   0.252 │   0.023 │ 4012.436 │   1.000 │   0.216 │   0.293 │      * │\n└────────────┴─────────┴─────────┴──────────┴─────────┴─────────┴─────────┴────────┘\n3) Structural Model.\n┌────────────┬─────────┬─────────┬──────────┬─────────┬─────────┬─────────┬────────┐\n│ parameters │    mean │     std │      ess │    rhat │     q05 │     q95 │    Sig │\n│     Symbol │ Float64 │ Float64 │  Float64 │ Float64 │ Float64 │ Float64 │ String │\n├────────────┼─────────┼─────────┼──────────┼─────────┼─────────┼─────────┼────────┤\n│     β[0,1] │   0.000 │   0.000 │      NaN │     NaN │   0.000 │   0.000 │      * │\n│     β[1,1] │  -0.067 │   0.064 │ 3287.917 │   1.000 │  -0.172 │   0.037 │        │\n│     β[2,1] │   0.540 │   0.044 │ 1181.655 │   1.001 │   0.469 │   0.612 │      * │\n│     β[3,1] │   0.209 │   0.035 │ 2558.694 │   1.001 │   0.153 │   0.266 │      * │\n│     β[4,1] │  -0.006 │   0.032 │ 3458.413 │   0.999 │  -0.057 │   0.046 │        │\n│     β[0,2] │   0.000 │   0.000 │      NaN │     NaN │   0.000 │   0.000 │      * │\n│     β[1,2] │   0.193 │   0.019 │ 3710.222 │   1.001 │   0.160 │   0.225 │      * │\n│     β[2,2] │   0.003 │   0.010 │ 3848.907 │   1.000 │  -0.013 │   0.019 │        │\n│     β[3,2] │  -0.036 │   0.010 │ 3981.757 │   1.000 │  -0.052 │  -0.020 │      * │\n│     β[4,2] │  -0.021 │   0.010 │ 4063.009 │   1.000 │  -0.037 │  -0.006 │      * │\n│     Σ[1,1] │   1.008 │   0.114 │ 2541.021 │   1.001 │   0.835 │   1.204 │      * │\n│     Σ[1,2] │  -0.042 │   0.028 │ 4110.644 │   1.000 │  -0.089 │   0.005 │        │\n│     Σ[2,1] │  -0.042 │   0.028 │ 4110.644 │   1.000 │  -0.089 │   0.005 │        │\n│     Σ[2,2] │   0.176 │   0.017 │ 4055.249 │   1.001 │   0.149 │   0.206 │      * │\n└────────────┴─────────┴─────────┴──────────┴─────────┴─────────┴─────────┴────────┘\n```\n\n\n:::\n:::\n\n\n\n\nLastly, let's check out this package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## See the objects in ex.\nls(ex)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"coef\"                          \"drawItemDifficulty\"           \n [3] \"drawItemDiscrimination\"        \"drawItemIntensity\"            \n [5] \"drawItemIntensityCross\"        \"drawItemIntensityCrossQr\"     \n [7] \"drawItemTimeResidual\"          \"drawItemTimeResidualCross\"    \n [9] \"drawItemTimeResidualCrossQr\"   \"drawQrWeightsCrossQr\"         \n[11] \"drawQrWeightsLatentQr\"         \"drawRaPgRandomVariable\"       \n[13] \"drawSubjAbility\"               \"drawSubjAbilityNull\"          \n[15] \"drawSubjCoefficients\"          \"drawSubjCorrCross\"            \n[17] \"drawSubjCorrCrossQr\"           \"drawSubjCovariance\"           \n[19] \"drawSubjCovariance2One\"        \"drawSubjCovarianceLatent\"     \n[21] \"drawSubjCovarianceLatentQr\"    \"drawSubjCovarianceNull\"       \n[23] \"drawSubjCovarianceNull2One\"    \"drawSubjSpeed\"                \n[25] \"drawSubjSpeedCross\"            \"drawSubjSpeedCrossQr\"         \n[27] \"drawSubjSpeedLatent\"           \"drawSubjSpeedLatentQr\"        \n[29] \"drawSubjSpeedNull\"             \"eval\"                         \n[31] \"evaluate\"                      \"getBias\"                      \n[33] \"getDic\"                        \"getLogLikelihoodMlIrt\"        \n[35] \"getLogLikelihoodRtIrt\"         \"getLogLikelihoodRtIrtCross\"   \n[37] \"getLogLikelihoodRtIrtCrossQr\"  \"getLogLikelihoodRtIrtLatent\"  \n[39] \"getLogLikelihoodRtIrtLatentQr\" \"getLogLikelihoodRtIrtNull\"    \n[41] \"getPrecisTable\"                \"getRmse\"                      \n[43] \"getSubjCoefficients\"           \"getSubjCoefficientsLatent\"    \n[45] \"getSubjCoefficientsLatentQr\"   \"getSubjCoefficientsMlIrt\"     \n[47] \"GibbsMlIrt\"                    \"GibbsRtIrt\"                   \n[49] \"GibbsRtIrt2\"                   \"GibbsRtIrtCross\"              \n[51] \"GibbsRtIrtCross2\"              \"GibbsRtIrtCrossQr\"            \n[53] \"GibbsRtIrtLatent\"              \"GibbsRtIrtLatent2\"            \n[55] \"GibbsRtIrtLatentQr\"            \"GibbsRtIrtNull\"               \n[57] \"include\"                       \"InputData\"                    \n[59] \"InputData4R\"                   \"InputPara\"                    \n[61] \"OutputDic\"                     \"OutputPost\"                   \n[63] \"OutputPostCross\"               \"OutputPostCrossQr\"            \n[65] \"OutputPostMlIrt\"               \"OutputPostRtIrtLatent\"        \n[67] \"OutputPostRtIrtLatentQr\"       \"precis\"                       \n[69] \"sample!\"                       \"setCond\"                      \n[71] \"setTrueParaRtIrt\"              \"SimConditions\"                \n[73] \"SimEvaluation\"                \n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}