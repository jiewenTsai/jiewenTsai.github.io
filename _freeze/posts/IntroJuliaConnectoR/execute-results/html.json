{
  "hash": "25ca02770fed5693b9d084c150963600",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction to `ExtendedRtIrtModeling.jl` through `JuliaConnectoR`\"\nauthor: \"JW Tsai\"\ndate: \"2024-11-19\"\nexecute:\n  cache: false\n---\n\n\nI've just updated my Julia package, `ExtendedRtIrtModeling.jl`, to version 0.2.0. There are a few new features in there that I'll run through in the next few sections.\n\nBut that's not all! If you're an R user, I'll introduce you to an R package called `JuliaConnectoR` that lets you run Julia programs in R. It'll bridge the two languages seamlessly.\n\n## Using in Julia\n\nSee the Github page.\n\n## Using in R\n\nAll you have to do is to install and library the `JuliaConnectoR` as usual, and then you can use the `juliaImport` function to import any Julia package. It seems like the package's version you get depends on which copy version you've had on your computer (**confirmed**). ~~The great thing is, it'll always download the newest version from Github, but not the stable one.~~\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(JuliaConnectoR)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'JuliaConnectoR' was built under R version 4.4.1\n```\n\n\n:::\n:::\n\n\nI've got a toy data set to test, but I'll run through the demo anyway. As you can see from the data below, the data set includes 25 columns: one for ID, 10 for item responses, 10 for (log-)response time, and four for explanatory variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemo <- read.csv('https://raw.githubusercontent.com/jiewenTsai/ExtendedRtIrtModeling.jl/refs/heads/main/data/demo.csv')\nhead(demo)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    id y1 y2 y3 y4 y5 y6 y7 y8 y9 y10    t1    t2    t3    t4    t5    t6    t7\n1 s001  0  0  0  0  1  0  0  0  0   0 2.961 4.225 3.322 2.164 2.273 2.631 2.505\n2 s002  0  0  0  0  1  1  1  0  0   0 3.848 3.996 4.434 3.246 2.663 3.819 2.158\n3 s003  0  0  0  0  0  1  1  1  0   0 3.122 3.273 4.489 3.891 3.410 3.879 2.951\n4 s004  0  1  0  0  0  0  1  0  0   0 3.515 3.162 4.151 3.371 2.885 3.026 1.439\n5 s005  0  0  0  0  0  0  1  0  1   0 3.060 3.962 4.058 3.696 2.732 2.560 2.517\n6 s006  0  0  0  0  1  0  0  0  0   0 3.546 3.360 3.382 3.262 1.931 1.629 1.463\n     t8    t9   t10 x1     x2     x3    x4\n1 3.924 2.198 2.878  0 -3.362 -0.200 1.063\n2 2.848 2.492 4.038  1 -0.081  2.347 1.063\n3 3.891 3.877 3.553  0 -0.829 -1.068 1.063\n4 3.243 2.694 3.603  1 -0.829 -0.676 1.063\n5 3.339 3.421 3.314  0 -0.829  0.097 1.063\n6 2.475 2.373 2.909  1 -1.251 -3.096 1.063\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(demo)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 300\nColumns: 25\n$ id  <chr> \"s001\", \"s002\", \"s003\", \"s004\", \"s005\", \"s006\", \"s007\", \"s008\", \"s…\n$ y1  <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, …\n$ y2  <int> 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ y3  <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ y4  <int> 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ y5  <int> 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, …\n$ y6  <int> 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, …\n$ y7  <int> 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, …\n$ y8  <int> 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, …\n$ y9  <int> 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, …\n$ y10 <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ t1  <dbl> 2.961, 3.848, 3.122, 3.515, 3.060, 3.546, 2.579, 3.854, 4.516, 2.9…\n$ t2  <dbl> 4.225, 3.996, 3.273, 3.162, 3.962, 3.360, 3.448, 3.451, 4.943, 4.1…\n$ t3  <dbl> 3.322, 4.434, 4.489, 4.151, 4.058, 3.382, 3.753, 2.875, 2.945, 5.0…\n$ t4  <dbl> 2.164, 3.246, 3.891, 3.371, 3.696, 3.262, 3.575, 3.634, 4.444, 4.0…\n$ t5  <dbl> 2.273, 2.663, 3.410, 2.885, 2.732, 1.931, 2.846, 2.560, 2.718, 2.8…\n$ t6  <dbl> 2.631, 3.819, 3.879, 3.026, 2.560, 1.629, 3.153, 2.499, 1.442, 3.3…\n$ t7  <dbl> 2.505, 2.158, 2.951, 1.439, 2.517, 1.463, 3.370, 2.581, 1.666, 3.2…\n$ t8  <dbl> 3.924, 2.848, 3.891, 3.243, 3.339, 2.475, 2.424, 2.124, 3.301, 3.3…\n$ t9  <dbl> 2.198, 2.492, 3.877, 2.694, 3.421, 2.373, 2.039, 2.749, 1.962, 2.7…\n$ t10 <dbl> 2.878, 4.038, 3.553, 3.603, 3.314, 2.909, 2.923, 2.366, 4.804, 3.6…\n$ x1  <int> 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, …\n$ x2  <dbl> -3.362, -0.081, -0.829, -0.829, -0.829, -1.251, 1.174, -0.829, -1.…\n$ x3  <dbl> -0.200, 2.347, -1.068, -0.676, 0.097, -3.096, -1.944, -1.258, -1.4…\n$ x4  <dbl> 1.063, 1.063, 1.063, 1.063, 1.063, 1.063, 0.104, -0.587, -2.002, -…\n```\n\n\n:::\n:::\n\n\nNext, let's take a look at how accuracy and speed related to each other, barely using the raw data (mean of y and mean of t) to get a rough idea.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(\n  accuracy = rowMeans(demo[2:11]),\n  speed = -rowMeans(demo[12:21])\n) |>\n  ggplot(aes(x=accuracy, y=speed)) +\n  geom_point() +\n  geom_jitter() +\n  geom_smooth(method = \"loess\") \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](IntroJuliaConnectoR_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## The modeling part.\n\nLet's follow the example from the Github readme post to show how a basic RT-IRT model works. This package is version 0.2.0.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## You have to give a name to the Julia Environment.\nex <- juliaImport(\"ExtendedRtIrtModeling\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nStarting Julia ...\n```\n\n\n:::\n\n```{.r .cell-code}\njuliaEval('Pkg.status(\"ExtendedRtIrtModeling\")')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nStatus `~/.julia/environments/v1.10/Project.toml`\n  [1fd685a6] ExtendedRtIrtModeling v0.2.0 `https://github.com/jiewenTsai/ExtendedRtIrtModeling.jl#main`\n```\n\n\n:::\n:::\n\n\nIn the original Github post, the user doesn't have to fill in all five arguments of `InputData` because the values for $\\kappa$ and *logT* are automatically calculated by *Y* and *T*. However, to get it working with R, I've come up with another struct called `InputData4R`, which is specifically for R users.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## import your data set\nCond = ex$setCond(\n  nChain=3, \n  nIter=3000,\n  nSubj=300,\n  nItem=10,\n  nFeat=4\n  )\nData = ex$InputData4R(\n    Y = as.matrix(demo[2:11]),\n    # you must write this line!\n    κ = as.matrix(demo[2:11]-0.5),\n    T = as.matrix(exp(demo[12:21])),\n    logT = as.matrix(demo[12:21]),\n    X = as.matrix(demo[22:25])\n)\n\n## build a model and sample it!\nMCMC = ex$GibbsRtIrt(Cond, Data=Data)\n## Notice the `` style for sample!\nex$`sample!`(MCMC)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Julia object of type ExtendedRtIrtModeling.GibbsRtIrt>\nExtendedRtIrtModeling.GibbsRtIrt(ExtendedRtIrtModeling.SimConditions(300, 10, 4, 3000, 3, 1500, 1, 10, 0.5, 0.5), ExtendedRtIrtModeling.InputData4R([0 0 … 0 0; 0 0 … 0 0; … ; 0 0 … 1 0; 0 1 … 1 0], [-0.5 -0.5 … -0.5 -0.5; -0.5 -0.5 … -0.5 -0.5; … ; -0.5 -0.5 … 0.5 -0.5; -0.5 0.5 … 0.5 -0.5], [19.31727937946127 68.3745035485581 … 9.006981510434914 17.778680238058843; 46.89917102861648 54.38019363641357 … 12.085422811327593 56.71280369681312; … ; 27.194098966393437 42.182270397465956 … 25.584840292351714 119.46219960089533; 35.05786562994266 82.26946350420168 … 43.991656898689 24.754319523777408], [2.961 4.225 … 2.198 2.878; 3.848 3.996 … 2.492 4.038; … ; 3.303 3.742 … 3.242 4.783; 3.557 4.41 … 3.784 3.209], [0.0 -3.362 -0.2 1.063; 1.0 -0.081 2.347 1.063; … ; 1.0 -0.064 0.445 -0.318; 0.0 -0.449 -0.676 1.063]), Float64[], ExtendedRtIrtModeling.InputPara([0.16235512824287404 0.18055135609546943 … 0.3492408256483714 0.11597784196814588; 0.25025625437178695 0.10835972536772774 … 0.3202743885047583 0.07554055445997454; … ; 0.11753014817268771 0.8966169927064876 … 0.06283734951096978 0.05960120350407306; 0.13805622649021926 0.11629215918921716 … 0.16856989658584684 0.07150215575361361], [-1.9394855871895962; -1.3673791305201042; … ; -0.4652826392010018; -0.41109216671608634;;], [1.4659449834884102; 1.5171355856967619; … ; 1.117081944512797; 1.2382459193142332;;], [-0.19591533391551952; -0.7426854154931866; … ; -0.7553080051246679; 0.15222150851576732;;], [0.6352537638397066; 0.34894812224814076; … ; -0.3603576281594744; -0.23195192965067143;;], [3.306175488597978; 3.951899638025907; … ; 2.8909003435678935; 3.753776737854663;;], [0.3481262734782223; 0.2881839794077276; … ; 0.2784567100513588; 0.3001931398341319;;], Float64[], [0.0 0.0; -0.03829770108483886 0.178208628989446; … ; 0.19613580221262814 -0.032885840668015184; -0.07018827564408225 -0.018261723616547616], Float64[], [1.0174492346468456 -0.013020802783966823; -0.013020802783966823 0.13925799108793127]), ExtendedRtIrtModeling.OutputPost([-1.9130831721304113 0.6384789718312938 … -0.3636355184387329 0.16924614350190792; -2.5761948656574525 -0.5188814946026086 … -60.135113342664035 0.2922433070967829; … ; -2.9532664608373578 -0.7370585947022027 … -0.6432701905335532 0.18265143113973015; -2.028354044844679 -0.7094672818196492 … -0.7491230620984574 0.16100145566485585;;; -2.309826525770789 1.0090760512220447 … -69.70411939046066 1.158364764935774; -2.0415924664127596 -0.006730188845023705 … -69.68468214672296 -0.046043378487269436; … ; -2.8815636240558784 -1.3370053754570157 … -0.6810045865738172 -0.05703201817967604; -2.755482149682994 -1.4205094862785277 … -0.8216638332221514 0.35205319151891673;;; -3.564579888290525 0.13018743912139816 … -84.40784517254401 -0.1175901501011264; -2.4402182920036983 -1.1937257201579508 … -64.56447692015946 -0.05008449194057312; … ; -2.0249866987713716 -1.2577797031606262 … -0.5889843511151087 0.1419424242808915; -1.9394855871895962 -1.3673791305201042 … -0.7553080051246679 0.15222150851576732], [-0.04589032192891968 0.14310713799048927 … 1.509203427815696 1.460127550412485; 0.5401561517417781 0.21957948614267214 … 0.31758615133594925 0.2741128366576769; … ; 0.45106547985296014 0.03804630033017699 … 0.3314099907065481 0.23935211828230996; 0.5898659874230483 0.4465617507053668 … 0.3115453885076623 0.21103294415246532;;; 0.5625513032426966 0.1842455230603158 … 0.3928138459172414 0.34260917243430755; 0.5962619059523504 0.2447286812341474 … 0.2874827937940946 0.2636336168793558; … ; 0.5288101435150241 0.3440892801456695 … 0.3001474214825944 0.247639699946621; 0.2714131766393561 0.4116974957653279 … 0.2949605964575351 0.27477563433680013;;; 0.5447134643004774 0.12561770241814635 … 0.31643517897139106 0.26480642489644274; 0.565587417696131 0.31782846427641503 … 0.27796827219979314 0.25569338755411836; … ; 0.8716632943954037 0.2766548408939548 … 0.2871803432878741 0.2502746955243891; 0.6352537638397066 0.34894812224814076 … 0.2784567100513588 0.3001931398341319], [0.0 0.2271764909191659 … 0.0630377241703311 1.0795320753501887; 0.0 -0.13137140956749854 … -0.03445019185018542 0.1631787968180395; … ; 0.0 0.11831782850695353 … -0.02467476084372711 0.18008644162663284; 0.0 -0.15173760514155943 … -0.06758551791641307 0.18553004620197178;;; 0.0 0.027798664208510866 … 0.05825973278449536 0.3180298770021992; 0.0 -0.09733527323001978 … -0.016985842726239358 0.17948345349804132; … ; 0.0 0.056086526076579976 … -0.057979547653260625 0.16554355507516957; 0.0 -0.044419758878696085 … -0.042585588349441005 0.1645666049658436;;; 0.0 -0.006464948217179556 … 0.01973346388959193 0.1779470724687213; 0.0 -0.04833050205063964 … -0.07405981170013269 0.18108972215907285; … ; 0.0 -0.03050418977495822 … -0.037771801655278894 0.1438963786957279; 0.0 -0.03829770108483886 … -0.013020802783966823 0.13925799108793127], [-6514.916574145873; -4673.17363119729; … ; -4467.337338433093; -4491.282229347154;;; -5029.945651548114; -4646.151543102344; … ; -4507.976898595485; -4484.802477943669;;; -4774.119972585931; -4634.951720998296; … ; -4487.341888932805; -4501.905414007908], ExtendedRtIrtModeling.InputPara(Float64[], [-2.2965618633478506, -0.8743369709972325, -1.135792688369854, -1.299920894308992, -1.3095201246806576, -2.119062832494006, -1.5460766940530377, -0.8845164198142405, -1.392474652439669, -1.0525156460721767  …  -0.5496422662336328, -0.557684511905269, -0.28968714818519437, -0.7642103397379496, -0.4160240012714402, -0.6309310355658374, -0.8839360551467729, -0.7116255676071, -0.3755650959666923, -0.8288063047729597], [1.3923288547255621, 1.6654043101433063, 1.9004397128517432, 2.350894150889114, 1.1890173754644349, 1.7003944697805977, 1.9117772997627314, 0.8604661999436497, 1.41190515381263, 1.6554502285249029], [-0.45083538706766596, -0.8878419088605833, 0.008490588400030282, -0.029343016671800847, -0.17073350887298985, -0.695667048116863, -1.6903424800238915, -1.1432110797927515, -0.6661858887480627, 0.04266471778324491], [0.5105314294831872, 0.18696766241316087, -0.07934672070841743, 0.40407427991820943, 0.20389604361177022, 0.8005138159367575, 0.4826046559645829, 0.6305063008963736, 0.22903622340116445, -0.02449205210916162  …  -0.6122429750597529, -0.2889059796104715, -0.15303681987864978, -0.4530864272962539, -0.03699875693044017, -0.5694807734816779, -0.016626016850991115, 0.28868407688154946, -0.19220725747352652, -0.22267245249058124], [3.3100200509491446, 3.8858215431914447, 4.584515242212625, 3.8263989406679353, 3.036210252965825, 3.248418270072149, 2.9878360742181296, 3.7127766036667484, 2.8729308898521895, 3.7430426883791377], [0.37853542161261916, 0.3039044653995011, 0.29678482564071884, 0.34844864003083026, 0.333353575977551, 0.4799988010406811, 0.2655637012829562, 0.29448239037725915, 0.2966200389482421, 0.2516450785926899], Float64[], [0.0, -0.06428122725537999, 0.5326895501202278, 0.20999516516533193, -0.006933135304731751, 0.0, 0.1919405768332102, 0.0032732199931965744, -0.036166969332448416, -0.02136285577815166], Float64[], [0.9966692311131616, -0.04144550795288676, -0.04144550795288676, 0.17550528007844737])))\n```\n\n\n:::\n\n```{.r .cell-code}\nex$coef(MCMC)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n>> Results for ExtendedRtIrtModeling.GibbsRtIrt.\n1) Item Parameters.\n┌───────┬─────────┬─────────┬─────────┬─────────┐\n│  Item │       a │       b │       λ │     σ²t │\n│ Int64 │ Float64 │ Float64 │ Float64 │ Float64 │\n├───────┼─────────┼─────────┼─────────┼─────────┤\n│     1 │   1.392 │  -0.451 │   3.310 │   0.379 │\n│     2 │   1.665 │  -0.888 │   3.886 │   0.304 │\n│     3 │   1.900 │   0.008 │   4.585 │   0.297 │\n│     4 │   2.351 │  -0.029 │   3.826 │   0.348 │\n│     5 │   1.189 │  -0.171 │   3.036 │   0.333 │\n│     6 │   1.700 │  -0.696 │   3.248 │   0.480 │\n│     7 │   1.912 │  -1.690 │   2.988 │   0.266 │\n│     8 │   0.860 │  -1.143 │   3.713 │   0.294 │\n│     9 │   1.412 │  -0.666 │   2.873 │   0.297 │\n│    10 │   1.655 │   0.043 │   3.743 │   0.252 │\n└───────┴─────────┴─────────┴─────────┴─────────┘\n2) Covariance of Person Parameters.\n┌──────┬────────┬────────┐\n│ Coef │      θ │      ζ │\n├──────┼────────┼────────┤\n│    θ │  0.997 │ -0.041 │\n│    ζ │ -0.041 │  0.176 │\n└──────┴────────┴────────┘\n3) Regression Coefficients.\n┌──────┬────────┬────────┐\n│ Coef │      θ │      ζ │\n├──────┼────────┼────────┤\n│   β0 │  0.000 │  0.000 │\n│   β1 │ -0.064 │  0.192 │\n│   β2 │  0.533 │  0.003 │\n│   β3 │  0.210 │ -0.036 │\n│   β4 │ -0.007 │ -0.021 │\n└──────┴────────┴────────┘\n4) Criterion.\n┌──────────┬──────────┐\n│ Deviance │      DIC │\n├──────────┼──────────┤\n│ 8959.374 │ 9607.001 │\n└──────────┴──────────┘\n```\n\n\n:::\n\n```{.r .cell-code}\nex$precis(MCMC)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n>> Results for ExtendedRtIrtModeling.GibbsRtIrt.\n1) Item Response Model.\n┌────────────┬─────────┬─────────┬──────────┬─────────┬─────────┬─────────┬────────┐\n│ parameters │    mean │     std │      ess │    rhat │     q05 │     q95 │    Sig │\n│     Symbol │ Float64 │ Float64 │  Float64 │ Float64 │ Float64 │ Float64 │ String │\n├────────────┼─────────┼─────────┼──────────┼─────────┼─────────┼─────────┼────────┤\n│         a1 │   1.392 │   0.215 │ 1945.434 │   1.001 │   1.057 │   1.762 │      * │\n│         a2 │   1.665 │   0.283 │ 1224.407 │   1.001 │   1.247 │   2.161 │      * │\n│         a3 │   1.900 │   0.292 │ 1513.209 │   1.001 │   1.452 │   2.407 │      * │\n│         a4 │   2.351 │   0.370 │ 1168.797 │   0.999 │   1.795 │   3.020 │      * │\n│         a5 │   1.189 │   0.180 │ 2627.287 │   1.001 │   0.899 │   1.500 │      * │\n│         a6 │   1.700 │   0.281 │ 1246.751 │   1.000 │   1.271 │   2.193 │      * │\n│         a7 │   1.912 │   0.407 │  390.376 │   1.000 │   1.278 │   2.649 │      * │\n│         a8 │   0.860 │   0.170 │ 1729.750 │   0.999 │   0.590 │   1.144 │      * │\n│         a9 │   1.412 │   0.221 │ 1632.180 │   1.000 │   1.046 │   1.778 │      * │\n│        a10 │   1.655 │   0.244 │ 1690.462 │   1.005 │   1.288 │   2.094 │      * │\n│         b1 │  -0.451 │   0.124 │ 1914.717 │   1.000 │  -0.656 │  -0.252 │      * │\n│         b2 │  -0.888 │   0.130 │ 1482.428 │   1.000 │  -1.110 │  -0.686 │      * │\n│         b3 │   0.008 │   0.105 │ 1764.269 │   1.000 │  -0.162 │   0.183 │        │\n│         b4 │  -0.029 │   0.098 │ 1761.759 │   1.000 │  -0.189 │   0.134 │        │\n│         b5 │  -0.171 │   0.131 │ 2405.333 │   1.000 │  -0.387 │   0.042 │        │\n│         b6 │  -0.696 │   0.119 │ 1577.804 │   1.000 │  -0.898 │  -0.504 │      * │\n│         b7 │  -1.690 │   0.203 │  476.598 │   0.999 │  -2.054 │  -1.395 │      * │\n│         b8 │  -1.143 │   0.254 │ 1722.613 │   1.000 │  -1.604 │  -0.796 │      * │\n│         b9 │  -0.666 │   0.128 │ 2147.480 │   1.000 │  -0.880 │  -0.465 │      * │\n│        b10 │   0.043 │   0.114 │ 1947.629 │   0.999 │  -0.145 │   0.232 │        │\n└────────────┴─────────┴─────────┴──────────┴─────────┴─────────┴─────────┴────────┘\n2) Response Time Model.\n┌────────────┬─────────┬─────────┬──────────┬─────────┬─────────┬─────────┬────────┐\n│ parameters │    mean │     std │      ess │    rhat │     q05 │     q95 │    Sig │\n│     Symbol │ Float64 │ Float64 │  Float64 │ Float64 │ Float64 │ Float64 │ String │\n├────────────┼─────────┼─────────┼──────────┼─────────┼─────────┼─────────┼────────┤\n│         λ1 │   3.310 │   0.044 │ 1871.532 │   1.000 │   3.238 │   3.384 │      * │\n│         λ2 │   3.886 │   0.041 │ 1794.119 │   1.000 │   3.817 │   3.954 │      * │\n│         λ3 │   4.585 │   0.041 │ 1757.448 │   0.999 │   4.516 │   4.653 │      * │\n│         λ4 │   3.826 │   0.043 │ 1786.553 │   1.000 │   3.756 │   3.896 │      * │\n│         λ5 │   3.036 │   0.042 │ 1764.103 │   1.000 │   2.969 │   3.105 │      * │\n│         λ6 │   3.248 │   0.048 │ 1842.989 │   1.000 │   3.171 │   3.327 │      * │\n│         λ7 │   2.988 │   0.039 │ 1715.494 │   1.000 │   2.924 │   3.054 │      * │\n│         λ8 │   3.713 │   0.041 │ 1732.453 │   1.000 │   3.645 │   3.780 │      * │\n│         λ9 │   2.873 │   0.041 │ 1723.637 │   1.000 │   2.806 │   2.941 │      * │\n│        λ10 │   3.743 │   0.039 │ 1623.583 │   1.000 │   3.680 │   3.808 │      * │\n│       σ²t1 │   0.379 │   0.035 │ 4341.160 │   1.000 │   0.326 │   0.440 │      * │\n│       σ²t2 │   0.304 │   0.028 │ 4353.910 │   1.000 │   0.261 │   0.351 │      * │\n│       σ²t3 │   0.297 │   0.027 │ 4508.439 │   1.000 │   0.254 │   0.344 │      * │\n│       σ²t4 │   0.348 │   0.031 │ 4176.080 │   1.000 │   0.301 │   0.400 │      * │\n│       σ²t5 │   0.333 │   0.030 │ 4612.968 │   1.000 │   0.288 │   0.386 │      * │\n│       σ²t6 │   0.480 │   0.043 │ 4534.513 │   1.000 │   0.414 │   0.555 │      * │\n│       σ²t7 │   0.266 │   0.025 │ 4265.130 │   1.000 │   0.227 │   0.308 │      * │\n│       σ²t8 │   0.294 │   0.027 │ 4497.298 │   1.000 │   0.253 │   0.341 │      * │\n│       σ²t9 │   0.297 │   0.027 │ 4663.724 │   1.000 │   0.255 │   0.342 │      * │\n│      σ²t10 │   0.252 │   0.023 │ 4531.827 │   1.000 │   0.215 │   0.291 │      * │\n└────────────┴─────────┴─────────┴──────────┴─────────┴─────────┴─────────┴────────┘\n3) Structural Model.\n┌────────────┬─────────┬─────────┬──────────┬─────────┬─────────┬─────────┬────────┐\n│ parameters │    mean │     std │      ess │    rhat │     q05 │     q95 │    Sig │\n│     Symbol │ Float64 │ Float64 │  Float64 │ Float64 │ Float64 │ Float64 │ String │\n├────────────┼─────────┼─────────┼──────────┼─────────┼─────────┼─────────┼────────┤\n│     β[0,1] │   0.000 │   0.000 │      NaN │     NaN │   0.000 │   0.000 │      * │\n│     β[1,1] │  -0.064 │   0.068 │ 2828.265 │   1.004 │  -0.176 │   0.046 │        │\n│     β[2,1] │   0.533 │   0.041 │ 1687.438 │   1.001 │   0.466 │   0.601 │      * │\n│     β[3,1] │   0.210 │   0.036 │ 2434.416 │   0.999 │   0.152 │   0.271 │      * │\n│     β[4,1] │  -0.007 │   0.031 │ 3549.816 │   1.000 │  -0.059 │   0.044 │        │\n│     β[0,2] │   0.000 │   0.000 │      NaN │     NaN │   0.000 │   0.000 │      * │\n│     β[1,2] │   0.192 │   0.020 │ 4551.039 │   1.000 │   0.160 │   0.224 │      * │\n│     β[2,2] │   0.003 │   0.009 │ 4317.254 │   0.999 │  -0.012 │   0.019 │        │\n│     β[3,2] │  -0.036 │   0.010 │ 4466.809 │   1.000 │  -0.052 │  -0.020 │      * │\n│     β[4,2] │  -0.021 │   0.010 │ 4619.634 │   1.000 │  -0.037 │  -0.005 │      * │\n│     Σ[1,1] │   0.997 │   0.115 │ 2660.074 │   1.000 │   0.821 │   1.195 │      * │\n│     Σ[1,2] │  -0.041 │   0.028 │ 4334.186 │   1.001 │  -0.088 │   0.004 │        │\n│     Σ[2,1] │  -0.041 │   0.028 │ 4334.186 │   1.001 │  -0.088 │   0.004 │        │\n│     Σ[2,2] │   0.176 │   0.017 │ 3878.583 │   1.000 │   0.149 │   0.204 │      * │\n└────────────┴─────────┴─────────┴──────────┴─────────┴─────────┴─────────┴────────┘\n```\n\n\n:::\n:::\n\n\nIf you want to use the `MCMC` class data in R, you can use the `juliaGet` function to convert Julia's objects to R's. But it'll take a loooooot of time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntime <- Sys.time()\nMCMC4R <- juliaGet(MCMC)\nSys.time() - time\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTime difference of 2.977953 mins\n```\n\n\n:::\n\n```{.r .cell-code}\nls(MCMC4R)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Cond\"     \"Data\"     \"Para\"     \"Post\"     \"truePara\"\n```\n\n\n:::\n\n```{.r .cell-code}\nls(MCMC4R$Post$mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"a\"   \"b\"   \"β\"   \"ζ\"   \"θ\"   \"λ\"   \"ν\"   \"ρ\"   \"σ²t\" \"Σp\"  \"ω\"  \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nMCMC4R$Post$ra[,311,] |> \n  as.data.frame() |>\n  pivot_longer(cols = everything(), names_to = \"variable\", values_to = \"value\") %>%\n  ggplot(aes(x = 1:nrow(.), y = value, color = variable, group = variable)) +\n  geom_line() +\n  labs(x = \"Index\", y = \"Value\", title = \"b1 MCMC chains\")\n```\n\n::: {.cell-output-display}\n![](IntroJuliaConnectoR_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nLastly, let's check out this package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## See the objects in ex.\nls(ex)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"coef\"                          \"drawItemDifficulty\"           \n [3] \"drawItemDiscrimination\"        \"drawItemIntensity\"            \n [5] \"drawItemIntensityCross\"        \"drawItemIntensityCrossQr\"     \n [7] \"drawItemTimeResidual\"          \"drawItemTimeResidualCross\"    \n [9] \"drawItemTimeResidualCrossQr\"   \"drawQrWeightsCrossQr\"         \n[11] \"drawQrWeightsLatentQr\"         \"drawRaPgRandomVariable\"       \n[13] \"drawSubjAbility\"               \"drawSubjAbilityNull\"          \n[15] \"drawSubjCoefficients\"          \"drawSubjCorrCross\"            \n[17] \"drawSubjCorrCrossQr\"           \"drawSubjCovariance\"           \n[19] \"drawSubjCovariance2One\"        \"drawSubjCovarianceLatent\"     \n[21] \"drawSubjCovarianceLatentQr\"    \"drawSubjCovarianceNull\"       \n[23] \"drawSubjCovarianceNull2One\"    \"drawSubjSpeed\"                \n[25] \"drawSubjSpeedCross\"            \"drawSubjSpeedCrossQr\"         \n[27] \"drawSubjSpeedLatent\"           \"drawSubjSpeedLatentQr\"        \n[29] \"drawSubjSpeedNull\"             \"eval\"                         \n[31] \"evaluate\"                      \"getBias\"                      \n[33] \"getDic\"                        \"getLogLikelihoodMlIrt\"        \n[35] \"getLogLikelihoodRtIrt\"         \"getLogLikelihoodRtIrtCross\"   \n[37] \"getLogLikelihoodRtIrtCrossQr\"  \"getLogLikelihoodRtIrtLatent\"  \n[39] \"getLogLikelihoodRtIrtLatentQr\" \"getLogLikelihoodRtIrtNull\"    \n[41] \"getPrecisTable\"                \"getRmse\"                      \n[43] \"getSubjCoefficients\"           \"getSubjCoefficientsLatent\"    \n[45] \"getSubjCoefficientsLatentQr\"   \"getSubjCoefficientsMlIrt\"     \n[47] \"GibbsMlIrt\"                    \"GibbsRtIrt\"                   \n[49] \"GibbsRtIrt2\"                   \"GibbsRtIrtCross\"              \n[51] \"GibbsRtIrtCross2\"              \"GibbsRtIrtCrossQr\"            \n[53] \"GibbsRtIrtLatent\"              \"GibbsRtIrtLatent2\"            \n[55] \"GibbsRtIrtLatentQr\"            \"GibbsRtIrtNull\"               \n[57] \"include\"                       \"InputData\"                    \n[59] \"InputData4R\"                   \"InputPara\"                    \n[61] \"OutputDic\"                     \"OutputPost\"                   \n[63] \"OutputPostCross\"               \"OutputPostCrossQr\"            \n[65] \"OutputPostMlIrt\"               \"OutputPostRtIrtLatent\"        \n[67] \"OutputPostRtIrtLatentQr\"       \"precis\"                       \n[69] \"sample!\"                       \"setCond\"                      \n[71] \"setTrueParaRtIrt\"              \"SimConditions\"                \n[73] \"SimEvaluation\"                \n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}