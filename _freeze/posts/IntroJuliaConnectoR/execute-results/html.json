{
  "hash": "cee38bc7d64e6d923656b06af3b7cbca",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction to `ExtendedRtIrtModeling.jl` through `JuliaConnectoR`\"\nauthor: \"JW Tsai\"\ndate: \"2024-11-19\"\nexecute:\n  cache: false\n---\n\n\nI've just updated my Julia package, `ExtendedRtIrtModeling.jl`, to version 0.2.0. There are a few new features in there that I'll run through in the next few sections.\n\nBut that's not all! If you're an R user, I'll introduce you to an R package called `JuliaConnectoR` that lets you run Julia programs in R. It'll bridge the two languages seamlessly.\n\n## Using in Julia\n\nSee the Github page.\n\n## Using in R\n\nAll you have to do is to install and library the `JuliaConnectoR` as usual, and then you can use the `juliaImport` function to import any Julia package. It seems like the package's version you get depends on which copy version you've had on your computer (**confirmed**). ~~The great thing is, it'll always download the newest version from Github, but not the stable one.~~\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(JuliaConnectoR)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'JuliaConnectoR' was built under R version 4.4.1\n```\n\n\n:::\n:::\n\n\nI've got a toy data set to test, but I'll run through the demo anyway. As you can see from the data below, the data set includes 25 columns: one for ID, 10 for item responses, 10 for (log-)response time, and four for explanatory variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemo <- read.csv('https://raw.githubusercontent.com/jiewenTsai/ExtendedRtIrtModeling.jl/refs/heads/main/data/demo.csv')\nhead(demo)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    id y1 y2 y3 y4 y5 y6 y7 y8 y9 y10    t1    t2    t3    t4    t5    t6    t7\n1 s001  0  0  0  0  1  0  0  0  0   0 2.961 4.225 3.322 2.164 2.273 2.631 2.505\n2 s002  0  0  0  0  1  1  1  0  0   0 3.848 3.996 4.434 3.246 2.663 3.819 2.158\n3 s003  0  0  0  0  0  1  1  1  0   0 3.122 3.273 4.489 3.891 3.410 3.879 2.951\n4 s004  0  1  0  0  0  0  1  0  0   0 3.515 3.162 4.151 3.371 2.885 3.026 1.439\n5 s005  0  0  0  0  0  0  1  0  1   0 3.060 3.962 4.058 3.696 2.732 2.560 2.517\n6 s006  0  0  0  0  1  0  0  0  0   0 3.546 3.360 3.382 3.262 1.931 1.629 1.463\n     t8    t9   t10 x1     x2     x3    x4\n1 3.924 2.198 2.878  0 -3.362 -0.200 1.063\n2 2.848 2.492 4.038  1 -0.081  2.347 1.063\n3 3.891 3.877 3.553  0 -0.829 -1.068 1.063\n4 3.243 2.694 3.603  1 -0.829 -0.676 1.063\n5 3.339 3.421 3.314  0 -0.829  0.097 1.063\n6 2.475 2.373 2.909  1 -1.251 -3.096 1.063\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(demo)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 300\nColumns: 25\n$ id  <chr> \"s001\", \"s002\", \"s003\", \"s004\", \"s005\", \"s006\", \"s007\", \"s008\", \"s…\n$ y1  <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, …\n$ y2  <int> 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ y3  <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ y4  <int> 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ y5  <int> 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, …\n$ y6  <int> 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, …\n$ y7  <int> 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, …\n$ y8  <int> 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, …\n$ y9  <int> 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, …\n$ y10 <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ t1  <dbl> 2.961, 3.848, 3.122, 3.515, 3.060, 3.546, 2.579, 3.854, 4.516, 2.9…\n$ t2  <dbl> 4.225, 3.996, 3.273, 3.162, 3.962, 3.360, 3.448, 3.451, 4.943, 4.1…\n$ t3  <dbl> 3.322, 4.434, 4.489, 4.151, 4.058, 3.382, 3.753, 2.875, 2.945, 5.0…\n$ t4  <dbl> 2.164, 3.246, 3.891, 3.371, 3.696, 3.262, 3.575, 3.634, 4.444, 4.0…\n$ t5  <dbl> 2.273, 2.663, 3.410, 2.885, 2.732, 1.931, 2.846, 2.560, 2.718, 2.8…\n$ t6  <dbl> 2.631, 3.819, 3.879, 3.026, 2.560, 1.629, 3.153, 2.499, 1.442, 3.3…\n$ t7  <dbl> 2.505, 2.158, 2.951, 1.439, 2.517, 1.463, 3.370, 2.581, 1.666, 3.2…\n$ t8  <dbl> 3.924, 2.848, 3.891, 3.243, 3.339, 2.475, 2.424, 2.124, 3.301, 3.3…\n$ t9  <dbl> 2.198, 2.492, 3.877, 2.694, 3.421, 2.373, 2.039, 2.749, 1.962, 2.7…\n$ t10 <dbl> 2.878, 4.038, 3.553, 3.603, 3.314, 2.909, 2.923, 2.366, 4.804, 3.6…\n$ x1  <int> 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, …\n$ x2  <dbl> -3.362, -0.081, -0.829, -0.829, -0.829, -1.251, 1.174, -0.829, -1.…\n$ x3  <dbl> -0.200, 2.347, -1.068, -0.676, 0.097, -3.096, -1.944, -1.258, -1.4…\n$ x4  <dbl> 1.063, 1.063, 1.063, 1.063, 1.063, 1.063, 0.104, -0.587, -2.002, -…\n```\n\n\n:::\n:::\n\n\nNext, let's take a look at how accuracy and speed related to each other, barely using the raw data (mean of y and mean of t) to get a rough idea.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(\n  accuracy = rowMeans(demo[2:11]),\n  speed = -rowMeans(demo[12:21])\n) |>\n  ggplot(aes(x=accuracy, y=speed)) +\n  geom_point() +\n  geom_jitter() +\n  geom_smooth(method = \"loess\") \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](IntroJuliaConnectoR_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## The modeling part.\n\nLet's follow the example from the Github readme post to show how a basic RT-IRT model works. This package is version 0.2.0.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## You have to give a name to the Julia Environment.\nex <- juliaImport(\"ExtendedRtIrtModeling\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nStarting Julia ...\n```\n\n\n:::\n\n```{.r .cell-code}\njuliaEval('Pkg.status(\"ExtendedRtIrtModeling\")')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nStatus `~/.julia/environments/v1.10/Project.toml`\n  [1fd685a6] ExtendedRtIrtModeling v0.2.0 `https://github.com/jiewenTsai/ExtendedRtIrtModeling.jl#main`\n```\n\n\n:::\n:::\n\n\nIn the original Github post, the user doesn't have to fill in all five arguments of `InputData` because the values for $\\kappa$ and *logT* are automatically calculated by *Y* and *T*. However, to get it working with R, I've come up with another struct called `InputData4R`, which is specifically for R users.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## import your data set\nCond = ex$setCond(\n  nChain=3, \n  nIter=3000,\n  nSubj=300,\n  nItem=10,\n  nFeat=4\n  )\nData = ex$InputData4R(\n    Y = as.matrix(demo[2:11]),\n    # you must write this line!\n    κ = as.matrix(demo[2:11]-0.5),\n    T = as.matrix(exp(demo[12:21])),\n    logT = as.matrix(demo[12:21]),\n    X = as.matrix(demo[22:25])\n)\n\n## build a model and sample it!\nMCMC = ex$GibbsRtIrt(Cond, Data=Data)\n## Notice the `` style for sample!\nex$`sample!`(MCMC)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Julia object of type ExtendedRtIrtModeling.GibbsRtIrt>\nExtendedRtIrtModeling.GibbsRtIrt(ExtendedRtIrtModeling.SimConditions(300, 10, 4, 3000, 3, 1500, 1, 10, 0.5, 0.5), ExtendedRtIrtModeling.InputData4R([0 0 … 0 0; 0 0 … 0 0; … ; 0 0 … 1 0; 0 1 … 1 0], [-0.5 -0.5 … -0.5 -0.5; -0.5 -0.5 … -0.5 -0.5; … ; -0.5 -0.5 … 0.5 -0.5; -0.5 0.5 … 0.5 -0.5], [19.31727937946127 68.3745035485581 … 9.006981510434914 17.778680238058843; 46.89917102861648 54.38019363641357 … 12.085422811327593 56.71280369681312; … ; 27.194098966393437 42.182270397465956 … 25.584840292351714 119.46219960089533; 35.05786562994266 82.26946350420168 … 43.991656898689 24.754319523777408], [2.961 4.225 … 2.198 2.878; 3.848 3.996 … 2.492 4.038; … ; 3.303 3.742 … 3.242 4.783; 3.557 4.41 … 3.784 3.209], [0.0 -3.362 -0.2 1.063; 1.0 -0.081 2.347 1.063; … ; 1.0 -0.064 0.445 -0.318; 0.0 -0.449 -0.676 1.063]), Float64[], ExtendedRtIrtModeling.InputPara([0.03803954836290282 0.15232909667566663 … 0.05161322853812894 0.13813548640620224; 0.6820446079265877 0.34147419401485857 … 0.08950104948637522 0.14098614046303293; … ; 0.10597207519925943 0.1647379067865525 … 0.39929612168578055 0.07881275553602582; 0.029065140357117505 0.11420999068850912 … 0.067385411002555 0.08432507233276894], [-3.2940883047383913; -0.8556087208746063; … ; 0.2957471460780982; -0.5130925360110484;;], [1.1729970641986105; 1.5458803495092144; … ; 1.6853029639293666; 1.530409031452339;;], [-0.517568491848459; -0.982877174566527; … ; -0.7583810973883602; -0.09740730421271002;;], [0.5187822333228932; 0.17945796808241804; … ; -0.4089531330263851; -0.28036133076001346;;], [3.3393118348012587; 3.87644094752713; … ; 2.8577060562598415; 3.7101671096169406;;], [0.36835845733426814; 0.32471225592571945; … ; 0.2879305608202483; 0.2535185154875389;;], Float64[], [0.0 0.0; -0.13955836192391025 0.19017204916811675; … ; 0.19452561633168883 -0.02569275995793209; 0.008873056157746655 -0.020109568214501022], Float64[], [1.0320100623914066 -0.07785061758422016; -0.07785061758422016 0.16895129102317735]), ExtendedRtIrtModeling.OutputPost([-2.5316054308599174 -1.0201149676069194 … -0.5075576803546703 -0.08864269630953704; -2.385233298441571 -1.4283258309850775 … -1.4219131141778978 0.2129493136184259; … ; -1.9741175809894413 -1.0250130746899613 … -0.5718654341855209 -0.1284281480151264; -2.844235988213971 -1.316783874105525 … -0.6786711872540668 -0.05857460754134373;;; -4.6483512794741735 0.3493888705714854 … -2.4506544874705565 0.6788249924528524; -3.7301650282003234 -0.35206014753877 … -1.060147038895324 -0.022847830081273553; … ; -2.3228954038123826 -0.7633078075173486 … -0.5218305601114234 -0.006863193064532861; -2.947459210211141 -1.1136049934548102 … -0.7818335114896942 -0.07936515200090292;;; -2.8110340000021417 -0.03212862955989345 … -2.025504239319318 0.45657793306823946; -4.1596980425369825 -0.14333259949396085 … -1.1332579574632875 0.3222192608749193; … ; -2.9995248309035096 -0.5025283160730506 … -0.7183550769803037 0.0676513203886467; -3.2940883047383913 -0.8556087208746063 … -0.7583810973883602 -0.09740730421271002], [1.4408516602399948 0.3119398314847293 … 1.436388830030692 1.7594573686009332; 0.6485769988459371 0.09799817794512869 … 0.31841190001990965 0.24727987392394055; … ; 0.6627543140062743 0.062379143944078154 … 0.2865093185798355 0.24389872189259454; 0.44614964292947934 -0.0009854797366953515 … 0.28884633266179777 0.21660633195557716;;; 0.20771950271501474 0.07470008557255679 … 0.4103878498912844 0.3363959900787248; 0.4426062385974111 0.5151675445567098 … 0.29291788454958345 0.2503375597447657; … ; 0.7070645022178579 0.20368876114203885 … 0.28272533057375293 0.24136415837075093; 0.45753666379890207 -0.18874208624041255 … 0.2834510081524539 0.2551776999849949;;; 0.30915139077679943 0.11755077510470256 … 0.33693480204725546 0.2526349715282094; 0.5271674464554031 -0.03412047093349183 … 0.31415501362293397 0.23995328803270566; … ; 0.4020971899295065 0.0677768958301857 … 0.3122296334816429 0.27227850933927056; 0.5187822333228932 0.17945796808241804 … 0.2879305608202483 0.2535185154875389], [0.0 -0.0887285183553337 … -0.01884626579878293 1.1285784837010724; 0.0 -0.08011816664565659 … -0.04343663237172715 0.18452860531678966; … ; 0.0 0.008086425833789466 … -0.025520812462631465 0.1612415796308012; 0.0 -0.12264846253365731 … -0.07384019130048343 0.17262190728489224;;; 0.0 -0.03664858006607563 … 0.0067944616781861365 0.338624461155973; 0.0 -0.1073789503209682 … -0.029642765491720922 0.19165667155122298; … ; 0.0 0.043887021217047927 … -0.03532031809739464 0.17413726452088615; 0.0 -0.1643751390334616 … -0.010822072367220475 0.18541630144658308;;; 0.0 -0.08211729186350054 … -0.08333707459658027 0.17415795145027568; 0.0 -0.13250855065322767 … -0.08673313781096505 0.187742906364859; … ; 0.0 -0.10128227451428869 … -0.03748007560750125 0.19121942907428163; 0.0 -0.13955836192391025 … -0.07785061758422016 0.16895129102317735], [-6445.598553588707; -4656.228890248507; … ; -4456.902783934122; -4505.806270733834;;; -4920.580097790624; -4651.149283501899; … ; -4485.579809921432; -4486.097395433786;;; -4738.516081862697; -4563.873634836814; … ; -4488.181661060116; -4498.276381449872], ExtendedRtIrtModeling.InputPara(Float64[], [-2.3178527540742926, -0.8727691300728337, -1.1270941644815011, -1.314220325940113, -1.312310125131537, -2.1240213345575376, -1.536219741784194, -0.8795771064111, -1.4058283159119116, -1.0523714562500226  …  -0.5537072915566369, -0.546197426858273, -0.29753429086726474, -0.7788845545983953, -0.4288798781746426, -0.6379621032854847, -0.8723359959589986, -0.7208395955141799, -0.361997792920653, -0.8277817235912058], [1.3646887304206927, 1.6249134397666332, 1.8934917297683258, 2.3652619116146667, 1.18944805219959, 1.6927963067386411, 1.9296843928969347, 0.8667577372850178, 1.3957341191353294, 1.6386217111971437], [-0.44883650701461625, -0.9009311334699093, 0.006551607624680888, -0.031151287825124063, -0.17518461393355453, -0.6986473086575202, -1.6871943987780424, -1.1352908353580398, -0.669812431184789, 0.04696243181135186], [0.509589166741046, 0.1857693357346427, -0.07550905171544396, 0.40371837798105975, 0.2002234493228274, 0.8028492233370474, 0.48629288082779365, 0.6280950508585535, 0.22958288133607635, -0.023509851785120262  …  -0.6163152317061098, -0.29266789451650377, -0.14583684556223742, -0.4492481178106896, -0.03887259744200821, -0.5674806365619091, -0.012016840151132151, 0.2897716967247682, -0.18971397270938126, -0.2222280311361607], [3.3110772418218453, 3.886891015780442, 4.585028345763602, 3.826681898387007, 3.035741278162338, 3.2494618858904034, 2.989106232465927, 3.7133118321634933, 2.871836307215324, 3.744248102212496], [0.37849522314915657, 0.3038684647893873, 0.2969197289574867, 0.3476434750321475, 0.3346892263551741, 0.48005082463379584, 0.26467319279133117, 0.294736952213553, 0.2975538551713775, 0.25231757824913936], Float64[], [0.0, -0.06626064690505433, 0.5352570881253667, 0.20818335593211268, -0.007044876853338413, 0.0, 0.19162663035539299, 0.0034722578078704674, -0.0358442425489261, -0.02106863957469503], Float64[], [1.0021210968899932, -0.04248597908967541, -0.04248597908967541, 0.17550175200038612])))\n```\n\n\n:::\n\n```{.r .cell-code}\nex$coef(MCMC)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n>> Results for ExtendedRtIrtModeling.GibbsRtIrt.\n1) Item Parameters.\n┌───────┬─────────┬─────────┬─────────┬─────────┐\n│  Item │       a │       b │       λ │     σ²t │\n│ Int64 │ Float64 │ Float64 │ Float64 │ Float64 │\n├───────┼─────────┼─────────┼─────────┼─────────┤\n│     1 │   1.365 │  -0.449 │   3.311 │   0.378 │\n│     2 │   1.625 │  -0.901 │   3.887 │   0.304 │\n│     3 │   1.893 │   0.007 │   4.585 │   0.297 │\n│     4 │   2.365 │  -0.031 │   3.827 │   0.348 │\n│     5 │   1.189 │  -0.175 │   3.036 │   0.335 │\n│     6 │   1.693 │  -0.699 │   3.249 │   0.480 │\n│     7 │   1.930 │  -1.687 │   2.989 │   0.265 │\n│     8 │   0.867 │  -1.135 │   3.713 │   0.295 │\n│     9 │   1.396 │  -0.670 │   2.872 │   0.298 │\n│    10 │   1.639 │   0.047 │   3.744 │   0.252 │\n└───────┴─────────┴─────────┴─────────┴─────────┘\n2) Covariance of Person Parameters.\n┌──────┬────────┬────────┐\n│ Coef │      θ │      ζ │\n├──────┼────────┼────────┤\n│    θ │  1.002 │ -0.042 │\n│    ζ │ -0.042 │  0.176 │\n└──────┴────────┴────────┘\n3) Regression Coefficients.\n┌──────┬────────┬────────┐\n│ Coef │      θ │      ζ │\n├──────┼────────┼────────┤\n│   β0 │  0.000 │  0.000 │\n│   β1 │ -0.066 │  0.192 │\n│   β2 │  0.535 │  0.003 │\n│   β3 │  0.208 │ -0.036 │\n│   β4 │ -0.007 │ -0.021 │\n└──────┴────────┴────────┘\n4) Criterion.\n┌──────────┬──────────┐\n│ Deviance │      DIC │\n├──────────┼──────────┤\n│ 8960.496 │ 9606.992 │\n└──────────┴──────────┘\n```\n\n\n:::\n\n```{.r .cell-code}\nex$precis(MCMC)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n>> Results for ExtendedRtIrtModeling.GibbsRtIrt.\n1) Item Response Model.\n┌────────────┬─────────┬─────────┬──────────┬─────────┬─────────┬─────────┬────────┐\n│ parameters │    mean │     std │      ess │    rhat │     q05 │     q95 │    Sig │\n│     Symbol │ Float64 │ Float64 │  Float64 │ Float64 │ Float64 │ Float64 │ String │\n├────────────┼─────────┼─────────┼──────────┼─────────┼─────────┼─────────┼────────┤\n│         a1 │   1.365 │   0.206 │ 2342.603 │   1.002 │   1.035 │   1.722 │      * │\n│         a2 │   1.625 │   0.280 │ 1002.293 │   0.999 │   1.217 │   2.111 │      * │\n│         a3 │   1.893 │   0.285 │ 1781.794 │   1.000 │   1.445 │   2.378 │      * │\n│         a4 │   2.365 │   0.409 │  667.978 │   1.004 │   1.789 │   3.120 │      * │\n│         a5 │   1.189 │   0.188 │ 2477.290 │   1.000 │   0.891 │   1.499 │      * │\n│         a6 │   1.693 │   0.288 │ 1083.316 │   1.003 │   1.274 │   2.226 │      * │\n│         a7 │   1.930 │   0.415 │  437.238 │   1.000 │   1.318 │   2.666 │      * │\n│         a8 │   0.867 │   0.166 │ 2222.551 │   0.999 │   0.606 │   1.158 │      * │\n│         a9 │   1.396 │   0.231 │ 1552.240 │   1.000 │   1.053 │   1.803 │      * │\n│        a10 │   1.639 │   0.246 │ 1767.400 │   1.003 │   1.253 │   2.063 │      * │\n│         b1 │  -0.449 │   0.126 │ 2041.894 │   1.000 │  -0.656 │  -0.249 │      * │\n│         b2 │  -0.901 │   0.133 │ 1252.257 │   1.000 │  -1.129 │  -0.694 │      * │\n│         b3 │   0.007 │   0.105 │ 1805.927 │   0.999 │  -0.165 │   0.184 │        │\n│         b4 │  -0.031 │   0.098 │ 1509.874 │   1.000 │  -0.192 │   0.131 │        │\n│         b5 │  -0.175 │   0.131 │ 2126.633 │   1.000 │  -0.394 │   0.035 │        │\n│         b6 │  -0.699 │   0.120 │ 1534.142 │   1.000 │  -0.901 │  -0.510 │      * │\n│         b7 │  -1.687 │   0.204 │  572.695 │   1.000 │  -2.031 │  -1.393 │      * │\n│         b8 │  -1.135 │   0.234 │ 2535.208 │   0.999 │  -1.546 │  -0.808 │      * │\n│         b9 │  -0.670 │   0.131 │ 1621.498 │   1.002 │  -0.892 │  -0.458 │      * │\n│        b10 │   0.047 │   0.113 │ 1964.482 │   1.001 │  -0.135 │   0.232 │        │\n└────────────┴─────────┴─────────┴──────────┴─────────┴─────────┴─────────┴────────┘\n2) Response Time Model.\n┌────────────┬─────────┬─────────┬──────────┬─────────┬─────────┬─────────┬────────┐\n│ parameters │    mean │     std │      ess │    rhat │     q05 │     q95 │    Sig │\n│     Symbol │ Float64 │ Float64 │  Float64 │ Float64 │ Float64 │ Float64 │ String │\n├────────────┼─────────┼─────────┼──────────┼─────────┼─────────┼─────────┼────────┤\n│         λ1 │   3.311 │   0.043 │ 2245.581 │   1.000 │   3.241 │   3.383 │      * │\n│         λ2 │   3.887 │   0.039 │ 2229.885 │   1.001 │   3.821 │   3.950 │      * │\n│         λ3 │   4.585 │   0.040 │ 2065.252 │   1.001 │   4.518 │   4.649 │      * │\n│         λ4 │   3.827 │   0.042 │ 2276.559 │   1.001 │   3.757 │   3.895 │      * │\n│         λ5 │   3.036 │   0.042 │ 2077.418 │   1.002 │   2.966 │   3.106 │      * │\n│         λ6 │   3.249 │   0.047 │ 2262.640 │   1.000 │   3.173 │   3.327 │      * │\n│         λ7 │   2.989 │   0.038 │ 2005.202 │   1.001 │   2.926 │   3.051 │      * │\n│         λ8 │   3.713 │   0.039 │ 2132.332 │   1.000 │   3.648 │   3.777 │      * │\n│         λ9 │   2.872 │   0.040 │ 2067.979 │   1.000 │   2.806 │   2.936 │      * │\n│        λ10 │   3.744 │   0.037 │ 1937.055 │   1.001 │   3.685 │   3.806 │      * │\n│       σ²t1 │   0.378 │   0.033 │ 4312.348 │   1.000 │   0.326 │   0.437 │      * │\n│       σ²t2 │   0.304 │   0.027 │ 4453.444 │   1.000 │   0.261 │   0.352 │      * │\n│       σ²t3 │   0.297 │   0.027 │ 4489.086 │   1.000 │   0.255 │   0.345 │      * │\n│       σ²t4 │   0.348 │   0.031 │ 4547.821 │   1.000 │   0.299 │   0.403 │      * │\n│       σ²t5 │   0.335 │   0.030 │ 4006.528 │   1.000 │   0.288 │   0.386 │      * │\n│       σ²t6 │   0.480 │   0.042 │ 4358.406 │   1.001 │   0.416 │   0.552 │      * │\n│       σ²t7 │   0.265 │   0.024 │ 4278.401 │   1.000 │   0.227 │   0.306 │      * │\n│       σ²t8 │   0.295 │   0.027 │ 4373.160 │   1.000 │   0.253 │   0.342 │      * │\n│       σ²t9 │   0.298 │   0.026 │ 4630.517 │   1.000 │   0.257 │   0.344 │      * │\n│      σ²t10 │   0.252 │   0.023 │ 4613.353 │   1.000 │   0.216 │   0.292 │      * │\n└────────────┴─────────┴─────────┴──────────┴─────────┴─────────┴─────────┴────────┘\n3) Structural Model.\n┌────────────┬─────────┬─────────┬──────────┬─────────┬─────────┬─────────┬────────┐\n│ parameters │    mean │     std │      ess │    rhat │     q05 │     q95 │    Sig │\n│     Symbol │ Float64 │ Float64 │  Float64 │ Float64 │ Float64 │ Float64 │ String │\n├────────────┼─────────┼─────────┼──────────┼─────────┼─────────┼─────────┼────────┤\n│     β[0,1] │   0.000 │   0.000 │      NaN │     NaN │   0.000 │   0.000 │      * │\n│     β[1,1] │  -0.066 │   0.066 │ 3169.522 │   1.000 │  -0.176 │   0.039 │        │\n│     β[2,1] │   0.535 │   0.041 │ 1605.987 │   1.000 │   0.470 │   0.604 │      * │\n│     β[3,1] │   0.208 │   0.035 │ 2846.589 │   1.000 │   0.153 │   0.267 │      * │\n│     β[4,1] │  -0.007 │   0.031 │ 3443.779 │   1.001 │  -0.058 │   0.043 │        │\n│     β[0,2] │   0.000 │   0.000 │      NaN │     NaN │   0.000 │   0.000 │      * │\n│     β[1,2] │   0.192 │   0.020 │ 4490.908 │   1.000 │   0.159 │   0.224 │      * │\n│     β[2,2] │   0.003 │   0.010 │ 3946.057 │   1.000 │  -0.013 │   0.019 │        │\n│     β[3,2] │  -0.036 │   0.010 │ 4445.270 │   1.000 │  -0.052 │  -0.020 │      * │\n│     β[4,2] │  -0.021 │   0.010 │ 4444.982 │   0.999 │  -0.037 │  -0.005 │      * │\n│     Σ[1,1] │   1.002 │   0.115 │ 2450.285 │   1.000 │   0.827 │   1.206 │      * │\n│     Σ[1,2] │  -0.042 │   0.029 │ 4313.151 │   1.000 │  -0.089 │   0.005 │        │\n│     Σ[2,1] │  -0.042 │   0.029 │ 4313.151 │   1.000 │  -0.089 │   0.005 │        │\n│     Σ[2,2] │   0.176 │   0.017 │ 4028.813 │   1.000 │   0.150 │   0.204 │      * │\n└────────────┴─────────┴─────────┴──────────┴─────────┴─────────┴─────────┴────────┘\n```\n\n\n:::\n:::\n\n\nIf you want to use the `MCMC` class data in R, you can use the `juliaGet` function to convert Julia's objects to R's. But it'll take a loooooot of time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntime <- Sys.time()\nMCMC4R <- juliaGet(MCMC)\nSys.time() - time\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTime difference of 2.703941 mins\n```\n\n\n:::\n\n```{.r .cell-code}\nls(MCMC4R)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Cond\"     \"Data\"     \"Para\"     \"Post\"     \"truePara\"\n```\n\n\n:::\n\n```{.r .cell-code}\nls(MCMC4R$Post$mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"a\"   \"b\"   \"β\"   \"ζ\"   \"θ\"   \"λ\"   \"ν\"   \"ρ\"   \"σ²t\" \"Σp\"  \"ω\"  \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nMCMC4R$Post$ra[,311,] |> \n  as.data.frame() |>\n  pivot_longer(cols = everything(), names_to = \"variable\", values_to = \"value\") %>%\n  ggplot(aes(x = 1:nrow(.), y = value, color = variable, group = variable)) +\n  geom_line() +\n  labs(x = \"Index\", y = \"Value\", title = \"b1 MCMC chains\")\n```\n\n::: {.cell-output-display}\n![](IntroJuliaConnectoR_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nLastly, let's check out this package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## See the objects in ex.\nls(ex)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"coef\"                          \"drawItemDifficulty\"           \n [3] \"drawItemDiscrimination\"        \"drawItemIntensity\"            \n [5] \"drawItemIntensityCross\"        \"drawItemIntensityCrossQr\"     \n [7] \"drawItemTimeResidual\"          \"drawItemTimeResidualCross\"    \n [9] \"drawItemTimeResidualCrossQr\"   \"drawQrWeightsCrossQr\"         \n[11] \"drawQrWeightsLatentQr\"         \"drawRaPgRandomVariable\"       \n[13] \"drawSubjAbility\"               \"drawSubjAbilityNull\"          \n[15] \"drawSubjCoefficients\"          \"drawSubjCorrCross\"            \n[17] \"drawSubjCorrCrossQr\"           \"drawSubjCovariance\"           \n[19] \"drawSubjCovariance2One\"        \"drawSubjCovarianceLatent\"     \n[21] \"drawSubjCovarianceLatentQr\"    \"drawSubjCovarianceNull\"       \n[23] \"drawSubjCovarianceNull2One\"    \"drawSubjSpeed\"                \n[25] \"drawSubjSpeedCross\"            \"drawSubjSpeedCrossQr\"         \n[27] \"drawSubjSpeedLatent\"           \"drawSubjSpeedLatentQr\"        \n[29] \"drawSubjSpeedNull\"             \"eval\"                         \n[31] \"evaluate\"                      \"getBias\"                      \n[33] \"getDic\"                        \"getLogLikelihoodMlIrt\"        \n[35] \"getLogLikelihoodRtIrt\"         \"getLogLikelihoodRtIrtCross\"   \n[37] \"getLogLikelihoodRtIrtCrossQr\"  \"getLogLikelihoodRtIrtLatent\"  \n[39] \"getLogLikelihoodRtIrtLatentQr\" \"getLogLikelihoodRtIrtNull\"    \n[41] \"getPrecisTable\"                \"getRmse\"                      \n[43] \"getSubjCoefficients\"           \"getSubjCoefficientsLatent\"    \n[45] \"getSubjCoefficientsLatentQr\"   \"getSubjCoefficientsMlIrt\"     \n[47] \"GibbsMlIrt\"                    \"GibbsRtIrt\"                   \n[49] \"GibbsRtIrt2\"                   \"GibbsRtIrtCross\"              \n[51] \"GibbsRtIrtCross2\"              \"GibbsRtIrtCrossQr\"            \n[53] \"GibbsRtIrtLatent\"              \"GibbsRtIrtLatent2\"            \n[55] \"GibbsRtIrtLatentQr\"            \"GibbsRtIrtNull\"               \n[57] \"include\"                       \"InputData\"                    \n[59] \"InputData4R\"                   \"InputPara\"                    \n[61] \"OutputDic\"                     \"OutputPost\"                   \n[63] \"OutputPostCross\"               \"OutputPostCrossQr\"            \n[65] \"OutputPostMlIrt\"               \"OutputPostRtIrtLatent\"        \n[67] \"OutputPostRtIrtLatentQr\"       \"precis\"                       \n[69] \"sample!\"                       \"setCond\"                      \n[71] \"setTrueParaRtIrt\"              \"SimConditions\"                \n[73] \"SimEvaluation\"                \n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}