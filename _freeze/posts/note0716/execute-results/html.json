{
  "hash": "f06d7e3bfacd3f7e6415ba0764ae7c8e",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Note0716 (mediation analysis with pymc)\nauthor: Tsai JW\ndate: '2023-07-16'\nformat: html\n---\n\n::: {#90cbc0b1 .cell execution_count=1}\n``` {.python .cell-code}\nimport pymc as pm\nimport numpy as np\nimport pandas as pd\nimport arviz as az\nimport matplotlib.pyplot as plt\n```\n:::\n\n\n::: {#d28d431e .cell execution_count=2}\n``` {.python .cell-code}\n#dat = pd.read_csv('data1463_fin3.csv')\n```\n:::\n\n\n為了之後還可以跑這個模型，根據原本的資料重新模擬一筆資料。\n\n~~(但這邊沒考慮到原本數值之間的相關情形)~~ 已考慮進去！！用多元常態分配模擬了。\n\n-   acd1eap $\\sim N(2.8510193121856177e-05, 0.8921482479092293)$\n-   scleap $\\sim N(1.9250494837216173e-06, 0.7154395945457549)$\n-   c1 $\\sim Ber(1,0.19822282980177716)$\n-   c2 $\\sim Ber(1,0.11483253588516747)$\n-   c3 $\\sim Ber(1,0.11551606288448393)$\n\n::: {#2d32bde5 .cell execution_count=3}\n``` {.python .cell-code}\n'''\n[dat.acd1_eap.mean(), dat.scl_eap.mean(),dat.c1.mean(),dat.c2.mean(),dat.c3.mean()]\nnp.cov([dat.acd1_eap, dat.scl_eap, dat.c1, dat.c2, dat.c3])\n'''\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n'\\n[dat.acd1_eap.mean(), dat.scl_eap.mean(),dat.c1.mean(),dat.c2.mean(),dat.c3.mean()]\\nnp.cov([dat.acd1_eap, dat.scl_eap, dat.c1, dat.c2, dat.c3])\\n'\n```\n:::\n:::\n\n\n::: {#6cd8a34e .cell execution_count=4}\n``` {.python .cell-code}\ndat_mn = np.array(\n    [2.8510193121856177e-05,\n     1.9250494837216173e-06,\n     0.19822282980177716,\n     0.11483253588516747,\n     0.11551606288448393]\n)\ndat_cov = np.array([\n    [ 0.7959285 ,  0.16304568, -0.01541732, -0.01689872, -0.02973076],\n    [ 0.16304568,  0.51185381, -0.05390401, -0.00531492, -0.02327021],\n    [-0.01541732, -0.05390401,  0.15903925, -0.022778  , -0.02291358],\n    [-0.01689872, -0.00531492, -0.022778  ,  0.10171555, -0.01327408],\n    [-0.02973076, -0.02327021, -0.02291358, -0.01327408,  0.10224199]\n])\ndat = np.random.multivariate_normal(dat_mn, dat_cov, 1000)\ndat = pd.DataFrame(dat, columns=['acd1_eap', 'scl_eap', 'c1', 'c2', 'c3'])\ndat['c1'] = dat['c1'] > 0.5\ndat['c2'] = dat['c2'] > 0.5\ndat['c3'] = dat['c3'] > 0.5\n```\n:::\n\n\n::: {#02f51dd2 .cell execution_count=5}\n``` {.python .cell-code}\ndat\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>acd1_eap</th>\n      <th>scl_eap</th>\n      <th>c1</th>\n      <th>c2</th>\n      <th>c3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>-1.832186</td>\n      <td>-0.818181</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>-0.859585</td>\n      <td>0.007910</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>-1.064876</td>\n      <td>-0.292433</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.157093</td>\n      <td>-0.130773</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>-0.697294</td>\n      <td>1.251342</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>995</th>\n      <td>-0.637325</td>\n      <td>-0.938027</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>996</th>\n      <td>-0.493642</td>\n      <td>-1.301775</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>997</th>\n      <td>-1.447881</td>\n      <td>-0.873753</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>998</th>\n      <td>1.887602</td>\n      <td>-0.160991</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>999</th>\n      <td>-0.926644</td>\n      <td>0.327866</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n<p>1000 rows × 5 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {#88ab174d .cell execution_count=6}\n``` {.python .cell-code}\n'''\ndat_dict = {\n    'acd1_eap': np.random.normal(loc=2.8510193121856177e-05, scale=0.8921482479092293, size=1000),\n    'scl_eap': np.random.normal(loc=1.9250494837216173e-06, scale=0.7154395945457549, size=1000),\n    'c1': np.random.binomial(n=1, p=0.19822282980177716, size=1000),\n    'c2': np.random.binomial(n=1, p=0.11483253588516747, size=1000),\n    'c3': np.random.binomial(n=1, p=0.11551606288448393, size=1000),    \n}\ndat = pd.DataFrame(dat_dict)\n'''\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n\"\\ndat_dict = {\\n    'acd1_eap': np.random.normal(loc=2.8510193121856177e-05, scale=0.8921482479092293, size=1000),\\n    'scl_eap': np.random.normal(loc=1.9250494837216173e-06, scale=0.7154395945457549, size=1000),\\n    'c1': np.random.binomial(n=1, p=0.19822282980177716, size=1000),\\n    'c2': np.random.binomial(n=1, p=0.11483253588516747, size=1000),\\n    'c3': np.random.binomial(n=1, p=0.11551606288448393, size=1000),    \\n}\\ndat = pd.DataFrame(dat_dict)\\n\"\n```\n:::\n:::\n\n\n::: {#0d5312dd .cell execution_count=7}\n``` {.python .cell-code}\nwith pm.Model() as model:\n    acd1eap = pm.ConstantData('acd1eap', dat.acd1_eap)\n    scleap = pm.ConstantData('scleap', dat.scl_eap)\n    c1 = pm.ConstantData('c1', dat.c1)\n    c2 = pm.ConstantData('c2', dat.c2)\n    c3 = pm.ConstantData('c3', dat.c3)\n\n    # intercept\n    acd1eap_Intercept = pm.Normal('acd1eap_Intercept', mu=0, sigma=100)\n    scleap_Intercept = pm.Normal('scleap_Intercept', mu=0, sigma=100)\n    \n    # noise\n    acd1eap_Sigma = pm.HalfCauchy(\"acd1eap_Sigma\", 1)\n    scleap_Sigma = pm.HalfCauchy(\"scleap_Sigma\", 1)\n\n    # slope\n    acd1eap_scleap = pm.Normal('acd1eap_scleap', mu=0, sigma=100)\n    acd1eap_c1 = pm.Normal('acd1eap_c1', mu=0, sigma=100)\n    acd1eap_c2 = pm.Normal('acd1eap_c2', mu=0, sigma=100)\n    acd1eap_c3 = pm.Normal('acd1eap_c3', mu=0, sigma=100)\n    scleap_c1 = pm.Normal('scleap_c1', mu=0, sigma=100)\n    scleap_c2 = pm.Normal('scleap_c2', mu=0, sigma=100)\n    scleap_c3 = pm.Normal('scleap_c3', mu=0, sigma=100)\n\n    # likelihood\n    pm.Normal(\"y_likelihood\", mu=acd1eap_Intercept + acd1eap_scleap * scleap  + acd1eap_c1 * c1 + acd1eap_c2 * c2 + acd1eap_c3 * c3, sigma =  acd1eap_Sigma, observed = acd1eap  )\n    pm.Normal('m_likelihood', mu=scleap_Intercept + scleap_c1 * c1 + scleap_c2 * c2 + scleap_c3 * c3, sigma = scleap_Sigma, observed = scleap)\n    \n    trace_med = pm.sample(2000, chains=4, cores=4)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [acd1eap_Intercept, scleap_Intercept, acd1eap_Sigma, scleap_Sigma, acd1eap_scleap, acd1eap_c1, acd1eap_c2, acd1eap_c3, scleap_c1, scleap_c2, scleap_c3]\nSampling 4 chains for 1_000 tune and 2_000 draw iterations (4_000 + 8_000 draws total) took 3 seconds.\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n<style>\n    /* Turns off some styling */\n    progress {\n        /* gets rid of default border in Firefox and Opera. */\n        border: none;\n        /* Needs to be in here for Safari polyfill so background images work as expected. */\n        background-size: auto;\n    }\n    progress:not([value]), progress:not([value])::-webkit-progress-bar {\n        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\n    }\n    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n        background: #F44336;\n    }\n</style>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n    <div>\n      <progress value='12000' class='' max='12000' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      100.00% [12000/12000 00:02&lt;00:00 Sampling 4 chains, 0 divergences]\n    </div>\n    \n```\n:::\n:::\n\n\n::: {#5e13d626 .cell execution_count=8}\n``` {.python .cell-code}\npm.model_to_graphviz(model)\n```\n\n::: {.cell-output .cell-output-error}\n```\nExecutableNotFound: failed to execute PosixPath('dot'), make sure the Graphviz executables are on your systems' PATH\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n<graphviz.graphs.Digraph at 0x16c3da760>\n```\n:::\n:::\n\n\n::: {#4352f3d6 .cell execution_count=9}\n``` {.python .cell-code}\naz.summary(trace_med)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mean</th>\n      <th>sd</th>\n      <th>hdi_3%</th>\n      <th>hdi_97%</th>\n      <th>mcse_mean</th>\n      <th>mcse_sd</th>\n      <th>ess_bulk</th>\n      <th>ess_tail</th>\n      <th>r_hat</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>acd1eap_Intercept</th>\n      <td>-0.010</td>\n      <td>0.035</td>\n      <td>-0.075</td>\n      <td>0.057</td>\n      <td>0.000</td>\n      <td>0.000</td>\n      <td>10011.0</td>\n      <td>6877.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>scleap_Intercept</th>\n      <td>0.046</td>\n      <td>0.029</td>\n      <td>-0.010</td>\n      <td>0.099</td>\n      <td>0.000</td>\n      <td>0.000</td>\n      <td>10186.0</td>\n      <td>6455.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>acd1eap_scleap</th>\n      <td>0.362</td>\n      <td>0.039</td>\n      <td>0.288</td>\n      <td>0.433</td>\n      <td>0.000</td>\n      <td>0.000</td>\n      <td>12517.0</td>\n      <td>5866.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>acd1eap_c1</th>\n      <td>0.085</td>\n      <td>0.065</td>\n      <td>-0.048</td>\n      <td>0.198</td>\n      <td>0.001</td>\n      <td>0.001</td>\n      <td>11231.0</td>\n      <td>6506.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>acd1eap_c2</th>\n      <td>0.121</td>\n      <td>0.087</td>\n      <td>-0.041</td>\n      <td>0.286</td>\n      <td>0.001</td>\n      <td>0.001</td>\n      <td>11756.0</td>\n      <td>6060.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>acd1eap_c3</th>\n      <td>-0.023</td>\n      <td>0.092</td>\n      <td>-0.202</td>\n      <td>0.144</td>\n      <td>0.001</td>\n      <td>0.001</td>\n      <td>12573.0</td>\n      <td>6617.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>scleap_c1</th>\n      <td>-0.189</td>\n      <td>0.054</td>\n      <td>-0.288</td>\n      <td>-0.088</td>\n      <td>0.001</td>\n      <td>0.000</td>\n      <td>10499.0</td>\n      <td>7141.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>scleap_c2</th>\n      <td>-0.052</td>\n      <td>0.073</td>\n      <td>-0.188</td>\n      <td>0.084</td>\n      <td>0.001</td>\n      <td>0.001</td>\n      <td>11519.0</td>\n      <td>6306.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>scleap_c3</th>\n      <td>-0.026</td>\n      <td>0.074</td>\n      <td>-0.165</td>\n      <td>0.111</td>\n      <td>0.001</td>\n      <td>0.001</td>\n      <td>11264.0</td>\n      <td>6601.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>acd1eap_Sigma</th>\n      <td>0.871</td>\n      <td>0.020</td>\n      <td>0.834</td>\n      <td>0.907</td>\n      <td>0.000</td>\n      <td>0.000</td>\n      <td>12788.0</td>\n      <td>6296.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>scleap_Sigma</th>\n      <td>0.709</td>\n      <td>0.016</td>\n      <td>0.680</td>\n      <td>0.740</td>\n      <td>0.000</td>\n      <td>0.000</td>\n      <td>13112.0</td>\n      <td>6090.0</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "note0716_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}